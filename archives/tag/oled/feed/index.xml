<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>OLED归档 - 冰封残烛的个人小站</title>
	<atom:link href="http://localhost/wordpress/archives/tag/oled/feed?simply_static_page=3737" rel="self" type="application/rss+xml" />
	<link></link>
	<description>FrozenCandle&#039;s Personal Site</description>
	<lastBuildDate>Mon, 12 Dec 2022 12:10:44 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2.1</generator>

<image>
	<url>/wp-content/uploads/2022/02/cropped-preview-2-150x150.jpg</url>
	<title>OLED归档 - 冰封残烛的个人小站</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>U8g2图形库与STM32移植</title>
		<link>/archives/301</link>
					<comments>/archives/301#respond</comments>
		
		<dc:creator><![CDATA[Hello]]></dc:creator>
		<pubDate>Thu, 09 Jun 2022 02:43:19 +0000</pubDate>
				<category><![CDATA[单片机与应用]]></category>
		<category><![CDATA[OLED]]></category>
		<category><![CDATA[STM32]]></category>
		<category><![CDATA[u8g2]]></category>
		<guid isPermaLink="false">/?p=301</guid>

					<description><![CDATA[<p>简介 U8g2 是一个用于嵌入式设备的简易图形库，可&#46;&#46;&#46;</p>
<p><a rel="nofollow" href="/archives/301">U8g2图形库与STM32移植</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></description>
										<content:encoded><![CDATA[<h2>简介</h2>
<p>U8g2 是一个用于嵌入式设备的简易图形库，可以在多种 OLED 和 LCD 屏幕上，支持包括 SSD1306 等多种类型的底层驱动，并可以很方便地移植到 Arduino 、树莓派、NodeMCU 和 ARM 上。</p>
<p>U8g2 库同时包含了 U8x8 绘图库，两者的区别为：</p>
<ul>
<li>U8g2 包含各种简单及复杂图形的绘制，并支持各种形式的字体，但需要占用一定单片机的内存作为绘图缓存</li>
<li>U8x8 只包含简单的显示文本功能，且只支持简单、定宽的字体。它直接绘制图形，没有缓存功能</li>
</ul>
<p>U8g2 库的 GitHub 地址为：<a href="https://github.com/olikraus/u8g2">https://github.com/olikraus/u8g2</a> ，可以从中获取到源码与文档帮助。</p>
<h2>移植</h2>
<p>本次以将 U8g2 移植到 STM32 单片机与 SSD1306 通过 I2C 驱动的 128x64 OLED 为例，介绍移植的方法。不同单片机和驱动的移植可以参考这一过程，也可以参考 U8g2 的官方移植教程 <a href="https://github.com/olikraus/u8g2/wiki/Porting-to-new-MCU-platform">https://github.com/olikraus/u8g2/wiki/Porting-to-new-MCU-platform</a> 。</p>
<p>首先下载或克隆 U8g2 的源码，这里主要是使用 C 语言编写，所以只需要用到 <code>csrc</code> 目录下的文件。</p>
<p>下载完成后，将 <code>csrc</code> 目录拷贝或移动到工程目录里，并重命名为合适的目录名例如 <code>u8g2lib</code> 。</p>
<p>接下来，需要删除一些无用的代码，并添加底层驱动的代码。</p>
<h3>删除无用内容</h3>
<p>U8g2 的源码为了支持多种设备驱动，包含了许多兼容性的代码。首先，类似 <code>u8x8_d_xxx.c</code> 命名的文件中包含 U8x8 的驱动兼容，文件名包括驱动的型号和屏幕分辨率，因此需要删除无用的驱动文件，只保留当前设备的驱动。例如，本次使用的是 128x64 的 SSD1306 屏幕，那么只需要保留 <code>u8x8_d_ssd1306_128x64_noname.c</code> 文件，删除其它类似的文件即可。U8g2 支持的所有屏幕驱动可以在 <a href="https://github.com/olikraus/u8g2/wiki/u8g2setupc">https://github.com/olikraus/u8g2/wiki/u8g2setupc</a> 找到。</p>
<p>同时还需要精简 <code>u8g2_d_setup.c</code> 和 <code>u8g2_d_memory.c</code> 中 U8g2 提供的驱动兼容。</p>
<p>在 <code>u8g2_d_setup.c</code> 中，只需要保留 <code>u8g2_Setup_ssd1306_i2c_128x64_noname_f()</code> 这一个函数即可。注意，该文件内有几个命名类似的函数：命名中无 <code>i2c</code> 的是 SPI 接口驱动的函数，需要根据接口选择；以 1 结尾的函数代表使用的缓存空间为 128 字节，以 2 结尾的函数代表使用的缓存为 256字节，类似以 f 结尾的函数代表使用的缓存为 1024 字节。</p>
<p><code>u8g2_d_memory.c</code> 文件也是同理，它需要根据 <code>u8g2_d_setup.c</code> 中的调用情况决定用到哪些函数。由于 <code>u8g2_Setup_ssd1306_i2c_128x64_noname_f()</code> 函数只用到 <code>u8g2_m_16_8_f()</code> 这一个函数，因此只需要保留它，其余函数全部删除即可。</p>
<p>还有一处必要的精简是字体文件 <code>u8x8_fonts.c</code> 和 <code>u8g2_fonts.c</code> ，尤其是 <code>u8g2_fonts.c</code> ，该文件提供了包括汉字在内的几万个文字的多种字体，仅源文件就有 30MB ，编译后占据的内存非常大。</p>
<p>字体类型的变量非常多，建议先复制一个备份后将所有变量删除，之后视情况再添加字体。字体变量的命名大致遵循以下规则：</p>
<div class="codeblock code-template">
    &lt;prefix&gt; '_' &lt;name&gt; '_' &lt;purpose&gt; &lt;charset&gt;</div>
<p>其中：</p>
<ul>
<li><code>&lt;prefix&gt;</code> 前缀基本上以 u8g2 开头；</li>
<li><code>&lt;name&gt;</code> 字体名，其中可能包含字符大小</li>
<li>各种 <code>&lt;purpose&gt;</code> 含义如下表所示：</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>t</td>
<td>透明字体形式</td>
</tr>
<tr>
<td>h</td>
<td>所有字符等高</td>
</tr>
<tr>
<td>m</td>
<td>monospace 字体（等宽字体）</td>
</tr>
<tr>
<td>8</td>
<td>每一个字符都是 8x8 大小的</td>
</tr>
</tbody>
</table>
<ul>
<li><code>&lt;charset&gt;</code> 是字体支持的字符集，如下表所示：</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>f</td>
<td>只包含单字节字符</td>
</tr>
<tr>
<td>r</td>
<td>只包含 ASCII 范围为 32~127 的字符</td>
</tr>
<tr>
<td>u</td>
<td>只包含 ASCII 范围为 32~95 的字符，即不包括小写英文</td>
</tr>
<tr>
<td>n</td>
<td>只包含数字及一些特殊用途字符</td>
</tr>
<tr>
<td>...</td>
<td>还包括许多自定义的字符集，例如有一些结尾带 gb2312 或 Chinese 的字体名就包括中文</td>
</tr>
</tbody>
</table>
<p>一般建议只保留需要的字体即可。</p>
<h3>添加回调函数</h3>
<p>U8g2 已经包含了 SSD1306 的驱动，只需要添加一个函数 <code>u8x8_gpio_and_delay()</code> 用于模拟时序即可。官方文件给出了一个函数的编写模板为：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8x8_gpio_and_delay</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8x8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">msg</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">arg_int</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">arg_ptr</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">switch</span><span style="color: #403f53;"> (</span><span style="color: #403f53;">msg</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_AND_DELAY_INIT</span><span style="color: #403f53;">: &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> called once during init phase of u8g2/u8x8</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> can be used to setup pins</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_NANO</span><span style="color: #403f53;">: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 1 nano second</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_100NANO</span><span style="color: #403f53;">: &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 100 nano seconds</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #a8a8a8;">/* and many other cases */</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_HOME</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu home pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">default</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">); &nbsp; &nbsp; </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> default return value</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; }</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">return</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">}</span></div>
</div>
<p>以下是一个写法示例：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8x8_gpio_and_delay</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8x8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">msg</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">arg_int</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">arg_ptr</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">switch</span><span style="color: #403f53;"> (</span><span style="color: #403f53;">msg</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_100NANO</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 100 nano seconds</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">__NOP</span><span style="color: #403f53;">();</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_10MICRO</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 10 micro seconds</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">for</span><span style="color: #403f53;"> (</span><span style="color: #994cc3;font-weight: bold;">uint16_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">n</span><span style="color: #403f53;"> </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">; </span><span style="color: #4876d6;">n</span><span style="color: #403f53;"> </span><span style="color: #994cc3;">&lt;</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">320</span><span style="color: #403f53;">; </span><span style="color: #4876d6;">n</span><span style="color: #994cc3;">++</span><span style="color: #403f53;">)</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">__NOP</span><span style="color: #403f53;">();</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_MILLI</span><span style="color: #403f53;">: &nbsp; </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 1 milli second</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">delay_ms</span><span style="color: #403f53;">(</span><span style="color: #aa0982;">1</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_I2C</span><span style="color: #403f53;">: &nbsp; &nbsp; </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">delay_us</span><span style="color: #403f53;">(</span><span style="color: #aa0982;">5</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_I2C_CLOCK</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=0: Output low at I2C clock pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #403f53;">arg_int</span><span style="color: #403f53;"> </span><span style="color: #994cc3;">?</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">GPIO_SetBits</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">GPIO_B</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">GPIO_Pin_6</span><span style="color: #403f53;">) </span><span style="color: #994cc3;">:</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">GPIO_ResetBits</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">GPIO_B</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">GPIO_Pin_6</span><span style="color: #403f53;">); &nbsp;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: Input dir with pullup high for I2C clock pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_I2C_DATA</span><span style="color: #403f53;">: &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=0: Output low at I2C data pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #403f53;">arg_int</span><span style="color: #403f53;"> </span><span style="color: #994cc3;">?</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">GPIO_SetBits</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">GPIO_B</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">GPIO_Pin_7</span><span style="color: #403f53;">) </span><span style="color: #994cc3;">:</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">GPIO_ResetBits</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">GPIO_B</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">GPIO_Pin_7</span><span style="color: #403f53;">); &nbsp;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: Input dir with pullup high for I2C data pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_SELECT</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu select pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_NEXT</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu next pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_PREV</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu prev pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_HOME</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu home pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">default</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">); </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> default return value</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; }</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">return</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">}</span></div>
</div>
<p>如果使用的引脚不是 PB6 和 PB7 ，注意在对应的位置修改；如果是使用硬件 I2C 的方式，那么可以不需要模拟时序，但是需要编写硬件驱动函数。在结尾处，会给出一个基于标准库的硬件移植方法。</p>
<p>最后，不要忘记了初始化 I2C 对应的 GPIO 引脚。</p>
<h2>U8g2简单使用</h2>
<p>U8g2 的初始化可以参考如下步骤：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_Init</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_Setup_ssd1306_i2c_128x64_noname_f(</span><span style="color: #403f53;">u8g2</span><span style="color: #4876d6;">, U8G2_R0, u8x8_byte_sw_i2c, u8x8_gpio_and_delay)</span><span style="color: #403f53;">; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> 初始化 u8g2 结构体</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_InitDisplay(</span><span style="color: #403f53;">u8g2</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> 根据所选的芯片进行初始化工作，初始化完成后，显示器处于关闭状态</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetPowerSave(</span><span style="color: #403f53;">u8g2</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">0</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> 打开显示器</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_ClearBuffer(</span><span style="color: #403f53;">u8g2</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">}</span></div>
</div>
<p>这里需要调用之前保留的 <code>u8g2_Setup_ssd1306_128x64_noname_f()</code> 函数，该函数的4个参数，其含义为：</p>
<ul>
<li><code>u8g2</code> ：需要配置的 U8g2 结构体</li>
<li><code>rotation</code> ：配置屏幕是否要旋转，默认使用 <code>U8G2_R0</code> 即可</li>
<li><code>byte_cb</code> ：传输字节的方式，这里使用软件 I2C 驱动，因此使用 U8g2 源码提供的 <code>u8x8_byte_sw_i2c()</code> 函数。如果是硬件 I2C 的话，可以参照编写自己的函数</li>
<li><code>gpio_and_delay_cb</code> ：提供给软件模拟 I2C 的 GPIO 输出和延时，使用之前编写的配置函数 <code>u8x8_gpio_and_delay()</code></li>
</ul>
<p>如果需要显示字符串，需要提前调用以下函数设置字体：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetFont</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">font</span><span style="color: #403f53;">);</span></div>
</div>
<hr>
<p>U8g2 的绘制方式有 2 种，每种都有不同的特点。</p>
<p>首先是全屏缓存模式(Full screen buffer mode)，它的特点是绘制速度快，并且所有的绘制方法都可以使用。但是这种模式需要大量的 RAM 空间，因此使用需要用到缓存为 1024 字节的初始化函数（函数名以 f 结尾）。</p>
<p>这种绘图的方式首先需要清除缓冲区，调用绘图 API 后绘制的内容会保留在缓存内，需要手动发送缓存的内容到屏幕上：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #4876d6;">u8g2_ClearBuffer(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #a8a8a8;">/* Draw Something */</span></div>
<div><span style="color: #4876d6;">u8g2_SendBuffer(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
</div>
<p>第二种是分页模式(Page mode)，它同样可以使用所有的绘制方法，但绘制速度较慢，不过占用的 RAM 空间也少，可以使用 128 或 256 字节的缓存（函数名以 1 和 2 结尾）。</p>
<p>这种绘图的方式首先创建第一页，然后在一个 <code>do...while</code> 循环内部绘制图形，不断判断是否到达下一页，如果到达了就自动刷新缓存：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_FirstPage(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #994cc3;font-weight: bold;">do</span><span style="color: #403f53;"> {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #a8a8a8;">/* Draw Something */</span></div>
<div><span style="color: #403f53;">} </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;"> (</span><span style="color: #4876d6;">u8g2_NextPage(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2)</span><span style="color: #403f53;">);</span></div>
</div>
<p>可以认为分页模式是一块一块绘制的，只绘制需要的区域。</p>
<p>还可以使用 U8x8 的绘图模式，这种情况下需要使用 U8x8 提供的结构体以及一系列函数，这里不再说明。</p>
<h2>绘图API</h2>
<p>完整的 API 参考可以参见官方文档 <a href="https://github.com/olikraus/u8g2/wiki/u8g2reference/">https://github.com/olikraus/u8g2/wiki/u8g2reference/</a> ，里面不仅有 API 的介绍，还有绘制效果的图片演示。</p>
<p>U8g2 的坐标系和绝大多数 GUI 库一样，原点在左上角，(x, y) 往右下递增，坐标的单位为像素。</p>
<h3>简单图形绘制</h3>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawPixel</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawHLine</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">len</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawVLine</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">len</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawLine</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x1</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y1</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y2</span><span style="color: #403f53;">);</span></div>
</div>
<p>分别用于绘制像素点、根据左上角顶点 (<code>x</code>, <code>y</code>) 与长度 <code>len</code> 绘制水平线与垂直线，以及绘制两点之间的线段。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawFrame</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">w</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">h</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawBox</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">w</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">h</span><span style="color: #403f53;">);</span></div>
</div>
<p>根据左上角的 (<code>x</code>, <code>y</code>) 坐标与宽 <code>w</code> 高 <code>h</code> 绘制空心与实心矩形。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawRBox</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> x, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> y, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> w, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> h, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> r);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawRFrame</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> x, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> y, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> w, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> h, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> r);</span></div>
</div>
<p>绘制实行与空心圆角矩形，多了一个参数圆角半径 <code>r</code> 。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawCircle</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">rad</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">option</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawDisc</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">rad</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">option</span><span style="color: #403f53;">);</span></div>
</div>
<p>根据圆心 (<code>x0</code>, <code>y0</code>) 绘制直径为 <code>rad</code> ×2+1 的空心圆和实心圆。</p>
<p><code>option</code> 为圆的部分选项，此参数可控制绘制圆弧或扇形：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>U8G_DRAW_ALL</code></td>
<td>整个圆弧</td>
</tr>
<tr>
<td><code>U8G2_DRAW_UPPER_RIGHT</code></td>
<td>右上部分的圆弧</td>
</tr>
<tr>
<td><code>U8G2_DRAW_UPPER_LEFT</code></td>
<td>左上部分的圆弧</td>
</tr>
<tr>
<td><code>U8G2_DRAW_LOWER_LEFT</code></td>
<td>左下部分的圆弧</td>
</tr>
<tr>
<td><code>U8G2_DRAW_LOWER_RIGHT</code></td>
<td>右下部分的圆弧</td>
</tr>
</tbody>
</table>
<p>还可以使用按位或运算符 <code>|</code> 连接几个部分。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawEllipse</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> x0, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> y0, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> rx, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> ry, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> option);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawFilledEllipse</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> x0, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> y0, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> rx, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> ry, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> option);</span></div>
</div>
<p>根据圆心 (<code>x0</code>, <code>y0</code>) 和水平半径 <code>rx</code> 、竖直半径 <code>ry</code> 绘制空心和实心椭圆。</p>
<p>void u8g2_DrawTriangle(u8g2_t *u8g2, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2);</p>
<p>根据三个点绘制实心三角形（空心三角形可以使用直线达到类似效果）。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawXBM</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> x, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> y, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> w, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> h, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">bitmap);</span></div>
</div>
<p>在图形左上角 (<code>x</code>, <code>y</code>) 根据宽 <code>w</code> 高 <code>h</code> 绘制 XBM 格式的位图。可以使用 <a href="https://tools.clz.me/image-to-bitmap-array">https://tools.clz.me/image-to-bitmap-array</a> 工具将一般图片转换为位图代码。</p>
<p>和 Bitmap 有关的函数还有一个：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetBitmapMode</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> is_transparent);</span></div>
</div>
<p>该函数用于设置 Bitmap 是否透明。</p>
<h3>字符显示</h3>
<p>为了显示字符串，首先要设置字体。调用以下函数可以提前设置字体：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetFont</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">font);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetFontMode</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> is_transparent);</span></div>
</div>
<p>字体是一种特殊的位图，因此也可以设置是否透明。所有的字体保存在 <code>u8g2_fonts.c</code> 源文件中，注意在移植 U8g2 库时曾经裁剪过该文件。</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawStr</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">char</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">str</span><span style="color: #403f53;">);</span></div>
</div>
<p>在左下角 (<code>x</code>, <code>y</code>) 处显示字符串。注意，这个方法只能绘制 ASCII 字符。如有需要显示 Unicode 字符，需要使用以下函数：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawGlyph</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint16_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">encoding</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_DrawUTF8</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">x</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">y</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">char</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">str</span><span style="color: #403f53;">);</span></div>
</div>
<p>绘制 Unicode 字符和字符串。U8g2 支持 16 位的 Unicode 字符集，因此 <code>encoding</code> 的范围被限制在 65535 。该函数绘制 Unicode 字符串时还需要对应的字体也支持 Unicode 字符。</p>
<p>注意这几个函数都有返回值，它们返回绘制成功的字符个数。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;">#</span><span style="color: #994cc3;font-weight: bold;">define</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_GetAscent</span><span style="color: #111111;">(</span><span style="color: #403f53;">u8g2</span><span style="color: #111111;">)</span></div>
<div><span style="color: #994cc3;">#</span><span style="color: #994cc3;font-weight: bold;">define</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_GetDescent</span><span style="color: #111111;">(</span><span style="color: #403f53;">u8g2</span><span style="color: #111111;">)</span></div>
</div>
<p>这两个宏定义用于获取字体基线以上和基线以下的高度。上文提到的显示字符串的函数实际上参数 <code>y</code> 指的是基线高度。此外注意基线以下的高度返回的是负值。</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_GetStrWidth</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">char</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">s);</span></div>
<div><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_GetUTF8Width</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #994cc3;font-weight: bold;">char</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">str);</span></div>
</div>
<p>获取当前字体下，字符串和 UTF-8 字符串的宽度，单位为像素。</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetFontDirection</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> dir);</span></div>
</div>
<p>设置文字朝向，根据参数不同分别设置为正常朝向的顺时针旋转 <code>dir</code> ×90° 。</p>
<h3>其它绘图相关API</h3>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_SetClipWindow</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">clip_x0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">clip_y0</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">clip_x1</span><span style="color: #403f53;">, </span><span style="color: #4876d6;">u8g2_uint_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">clip_y1</span><span style="color: #403f53;">);</span></div>
</div>
<p>设置采集窗口大小，设置后绘制的图形只在该窗口范围内显示。设置后可以使用 <code>u8g2_SetMaxClipWindow()</code> 函数去掉该限制。</p>
<h2>示例代码</h2>
<p>以下官方示例代码可以在 OLED 上显示该库的 logo ：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #4876d6;">u8g2_FirstPage</span><span style="color: #403f53;">(</span><span style="color: #0c969b;">&amp;</span><span style="color: #403f53;">u8g2);</span></div>
<div><span style="color: #994cc3;font-weight: bold;">do</span><span style="color: #403f53;"> {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFontMode(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">1</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFontDirection(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">0</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFont(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, u8g2_font_inb24_mf)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawStr(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">0</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">20</span><span style="color: #4876d6;">, </span><span style="color: #111111;">"</span><span style="color: #c96765;">U</span><span style="color: #111111;">"</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFontDirection(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">1</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFont(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, u8g2_font_inb30_mn)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawStr(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">21</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">8</span><span style="color: #4876d6;">, </span><span style="color: #111111;">"</span><span style="color: #c96765;">8</span><span style="color: #111111;">"</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFontDirection(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">0</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFont(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, u8g2_font_inb24_mf)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawStr(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">51</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">30</span><span style="color: #4876d6;">, </span><span style="color: #111111;">"</span><span style="color: #c96765;">g</span><span style="color: #111111;">"</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawStr(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">67</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">30</span><span style="color: #4876d6;">, </span><span style="color: #111111;">"</span><span style="color: #aa0982;">\xb2</span><span style="color: #111111;">"</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawHLine(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">2</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">35</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">47</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawHLine(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">3</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">36</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">47</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawVLine(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">45</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">32</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">12</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawVLine(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">46</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">33</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">12</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_SetFont(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, u8g2_font_4x6_tr)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #4876d6;">u8g2_DrawStr(</span><span style="color: #0c969b;">&amp;</span><span style="color: #4876d6;">u8g2, </span><span style="color: #aa0982;">1</span><span style="color: #4876d6;">, </span><span style="color: #aa0982;">54</span><span style="color: #4876d6;">, </span><span style="color: #111111;">"</span><span style="color: #c96765;">github.com/olikraus/u8g2</span><span style="color: #111111;">"</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">} </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;"> (</span><span style="color: #4876d6;">u8g2_NextPage</span><span style="color: #403f53;">(</span><span style="color: #0c969b;">&amp;</span><span style="color: #403f53;">u8g2));</span></div>
</div>
<h2>附录：使用硬件I2C移植U8g2</h2>
<p>硬件 I2C 效率上比软件 I2C 快了非常多，因此特别适合 U8g2 这种大型 UI 框架。下面基于标准库介绍硬件 I2C 的移植方式。</p>
<p>如果使用硬件 I2C ，需要在调用该函数（或类似函数）时，使用自己的硬件读写函数：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_Setup_ssd1306_i2c_128x64_noname_f</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8g2_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">const</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8g2_cb_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">rotation</span><span style="color: #403f53;">, u8x8_msg_cb </span><span style="color: #403f53;">byte_cb</span><span style="color: #403f53;">, u8x8_msg_cb </span><span style="color: #403f53;">gpio_and_delay_cb</span><span style="color: #403f53;">);</span></div>
</div>
<p>首先还是需要编写一个 <code>gpio_and_delay()</code> 回调函数。不过由于这里是使用硬件 I2C ，因此不再需要提供 GPIO 和时序操作的支持，只需要提供一个毫秒级的延时即可：</p>
<div class="vscode-block">
<div><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8x8_gpio_and_delay_hw</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8x8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">msg</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #403f53;">arg_int</span><span style="color: #403f53;">, </span><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">arg_ptr</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">switch</span><span style="color: #403f53;"> (</span><span style="color: #403f53;">msg</span><span style="color: #403f53;">) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_100NANO</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 100 nano seconds</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_10MICRO</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 10 micro seconds</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_MILLI</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> delay arg_int * 1 milli second</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">Delay_ms</span><span style="color: #403f53;">(</span><span style="color: #aa0982;">1</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_DELAY_I2C</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_I2C_CLOCK</span><span style="color: #403f53;">: </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=0: Output low at I2C clock pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: Input dir with pullup high for I2C clock pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_I2C_DATA</span><span style="color: #403f53;">: &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=0: Output low at I2C data pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> arg_int=1: Input dir with pullup high for I2C data pin</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_SELECT</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu select pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_NEXT</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu next pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_PREV</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu prev pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_GPIO_MENU_HOME</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #a8a8a8;">/* get menu home pin state */</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">default</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">u8x8_SetGPIOResult</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8x8</span><span style="color: #403f53;">, </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">); </span><span style="color: #a8a8a8;">//</span><span style="color: #939dbb;"> default return value</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; }</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">return</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">}</span></div>
</div>
<p>如果是使用硬件 I2C ，那么需要自行编写硬件驱动函数，向 OLED 写入字节。这个函数的编写可以参考官方提供的软件驱动函数 <code>u8x8_byte_sw_i2c()</code> ，一个编写示例为：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">uint8_t</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">u8x8_byte_hw_i2c</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">u8x8_t</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">u8x8, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> msg, </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #403f53;"> arg_int, </span><span style="color: #994cc3;font-weight: bold;">void</span><span style="color: #403f53;"> </span><span style="color: #0c969b;">*</span><span style="color: #403f53;">arg_ptr) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #0c969b;">*</span><span style="color: #403f53;"> data </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> (</span><span style="color: #994cc3;font-weight: bold;">uint8_t</span><span style="color: #0c969b;">*</span><span style="color: #403f53;">) arg_ptr;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">switch</span><span style="color: #403f53;">(msg) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_BYTE_SEND</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;">( arg_int</span><span style="color: #0c969b;">--</span><span style="color: #403f53;"> </span><span style="color: #994cc3;">&gt;</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;"> ) {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_SendData(I2C1, </span><span style="color: #0c969b;">*</span><span style="color: #4876d6;">data</span><span style="color: #994cc3;">++</span><span style="color: #4876d6;">)</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;"> (</span><span style="color: #994cc3;">!</span><span style="color: #4876d6;">I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)</span><span style="color: #403f53;">) </span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">continue</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_BYTE_INIT</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #a8a8a8;">/* add your custom code to init i2c subsystem */</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">RCC_APB1PeriphClockCmd</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">RCC_APB1Periph_I2C1</span><span style="color: #403f53;">, ENABLE);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; I2C_InitTypeDef I2C_InitStructure </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> {</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_Mode </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> I2C_Mode_I2C,</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_DutyCycle </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> I2C_DutyCycle_2,</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_OwnAddress1 </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0x10</span><span style="color: #403f53;">,</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_Ack </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> I2C_Ack_Enable,</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_AcknowledgedAddress </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> I2C_AcknowledgedAddress_7bit,</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .I2C_ClockSpeed </span><span style="color: #994cc3;">=</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">400000</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_Init</span><span style="color: #403f53;">(I2C1, </span><span style="color: #0c969b;">&amp;</span><span style="color: #403f53;">I2C_InitStructure);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_Cmd</span><span style="color: #403f53;">(</span><span style="color: #403f53;">I2C1</span><span style="color: #403f53;">, </span><span style="color: #403f53;">ENABLE</span><span style="color: #403f53;">); &nbsp;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_BYTE_SET_DC</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #a8a8a8;">/* ignored for i2c */</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_BYTE_START_TRANSFER</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;">(</span><span style="color: #4876d6;">I2C_GetFlagStatus</span><span style="color: #403f53;">(I2C1, I2C_FLAG_BUSY));</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_GenerateSTART</span><span style="color: #403f53;">(</span><span style="color: #403f53;">I2C1</span><span style="color: #403f53;">, </span><span style="color: #403f53;">ENABLE</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;">(</span><span style="color: #994cc3;">!</span><span style="color: #4876d6;">I2C_CheckEvent</span><span style="color: #403f53;">(I2C1, I2C_EVENT_MASTER_MODE_SELECT))</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">continue</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_Send7bitAddress</span><span style="color: #403f53;">(</span><span style="color: #403f53;">I2C1</span><span style="color: #403f53;">, </span><span style="color: #aa0982;">0x78</span><span style="color: #403f53;">, </span><span style="color: #403f53;">I2C_Direction_Transmitter</span><span style="color: #403f53;">);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">while</span><span style="color: #403f53;">(</span><span style="color: #994cc3;">!</span><span style="color: #4876d6;">I2C_CheckEvent</span><span style="color: #403f53;">(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">continue</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">case</span><span style="color: #403f53;"> </span><span style="color: #4876d6;">U8X8_MSG_BYTE_END_TRANSFER</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">I2C_GenerateSTOP</span><span style="color: #403f53;">(I2C1, ENABLE);</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">break</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #4876d6;">default</span><span style="color: #403f53;">:</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">return</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">0</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; }</span></div>
<div><span style="color: #403f53;">&nbsp; &nbsp; </span><span style="color: #994cc3;font-weight: bold;">return</span><span style="color: #403f53;"> </span><span style="color: #aa0982;">1</span><span style="color: #403f53;">;</span></div>
<div><span style="color: #403f53;">}</span></div>
</div>
<p>从各个 <code>case</code> 标签可以很明白地看出一个 I2C 的读写过程：<code>U8X8_MSG_BYTE_INIT</code> 标签下需要初始化 I2C 外设，<code>U8X8_MSG_BYTE_START_TRANSFER</code> 标签产生起始信号并发出目标地址，<code>U8X8_MSG_BYTE_SEND</code> 标签开始发送字节，并且发送的字节存储在 <code>*arg_ptr</code> 参数中，<code>arg_int</code> 是字节的总长度（ U8g2 库似乎一次不会传输多余 32 字节的信息）。最后，<code>U8X8_MSG_BYTE_END_TRANSFER</code> 标签处产生停止信号。</p>
<blockquote><p>注意在使用硬件 I2C 时，GPIO 需要设置为复用开漏输出模式 <code>GPIO_Mode_AF_OD</code> 。</p></blockquote>
<p>最后一步，用以上编写的硬件函数初始化 U8g2 驱动：</p>
<div class="vscode-block">
<div><span style="color: #4876d6;">u8g2_Setup_ssd1306_i2c_128x64_noname_f</span><span style="color: #403f53;">(</span><span style="color: #403f53;">u8g2</span><span style="color: #403f53;">, </span><span style="color: #403f53;">U8G2_R0</span><span style="color: #403f53;">, </span><span style="color: #403f53;">u8x8_byte_hw_i2c</span><span style="color: #403f53;">, </span><span style="color: #403f53;">u8x8_gpio_and_delay_hw</span><span style="color: #403f53;">);</span></div>
</div>
<p>硬件移植过程完毕。</p>
<p><a rel="nofollow" href="/archives/301">U8g2图形库与STM32移植</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/301/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
