<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>编程语言归档 - 冰封残烛的个人小站</title>
	<atom:link href="http://localhost/wordpress/archives/tag/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/feed?simply_static_page=3794" rel="self" type="application/rss+xml" />
	<link></link>
	<description>FrozenCandle&#039;s Personal Site</description>
	<lastBuildDate>Mon, 12 Dec 2022 12:25:11 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2.1</generator>

<image>
	<url>/wp-content/uploads/2022/02/cropped-preview-2-150x150.jpg</url>
	<title>编程语言归档 - 冰封残烛的个人小站</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>正则表达式简单入门</title>
		<link>/archives/124</link>
					<comments>/archives/124#respond</comments>
		
		<dc:creator><![CDATA[Hello]]></dc:creator>
		<pubDate>Wed, 23 Feb 2022 15:10:05 +0000</pubDate>
				<category><![CDATA[编程语言]]></category>
		<category><![CDATA[正则表达式]]></category>
		<guid isPermaLink="false">/?p=124</guid>

					<description><![CDATA[<p>正则表达式(Regular Expression)，&#46;&#46;&#46;</p>
<p><a rel="nofollow" href="/archives/124">正则表达式简单入门</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<p><strong>正则表达式</strong>(Regular Expression)，是由一些特定字符及其组合所组成的字符串表达式，用来对目标字符串进行匹配、查找操作。</p>



<p>对于一些有规律的字符串匹配操作需求，例如特定网址、手机号码、生物信息等符合一定规律的字符串，无法用简单的判断表达式涵盖，而用正则表达式可以简洁、准确地表达其组成规律，从而高效地进行匹配操作。</p>



<h2 class="wp-block-heading" id="基本匹配语法">基本匹配语法</h2>



<p>在一个正则表达式中，一些普通文本用途就是代表实际需要匹配的字符。但不同于编程语言常见的字符串查找，正则表达式提供了特殊字符与结构，可以表达更抽象的字符串结构。</p>



<h3 class="wp-block-heading" id="基本特殊字符">基本特殊字符</h3>



<p>使用 <code class="modern">\d</code> 可以匹配一个数字：</p>



<p><code class="modern">"12<mark style="background-color: rgb(255, 220, 209);">\d</mark>"</code></p>



<ul><li>可以匹配 <code class="modern">"124"</code></li><li>不能匹配 <code class="modern">"12a" "12G" "12&gt;" "12我"</code></li></ul>



<p>使用 <code>\w</code> 可以匹配一个字母或数字，但不匹配符号和汉字：</p>



<p><code class="modern">"ca<mark style="background-color: rgb(255, 220, 209);">\w</mark>"</code></p>



<ul><li>可以匹配 <code class="modern">"cat" "ca4"</code></li><li>不能匹配 <code class="modern">"ca?" "ca字"</code></li></ul>



<p>使用点号 <code>.</code> 可以匹配除换行符外的任意一个字符（包括数字、符号、中文）：</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">.</mark>txt"</code></p>



<ul><li>可以匹配 <code class="modern">".txt" "xtxt" "1txt" "&gt;txt" "这txt"</code></li><li>不能匹配单独的 <code class="modern">"txt"</code></li></ul>



<h3 class="wp-block-heading" id="限定匹配">限定匹配</h3>



<p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。</p>



<p>使用星号 <code class="modern">*</code> 可以匹配前一个字符 0 次、1 次或多次：</p>



<p><code class="modern">"lon<mark style="background-color: rgb(255, 220, 209);">*</mark>g"</code></p>



<ul><li>可以匹配 <code class="modern">"log" "long" "lonng" "lonnnnnng"</code></li></ul>



<p>使用加号 <code class="modern">+</code> 可以匹配前一个字符 1 次或多次：</p>



<p><code class="modern">"hi<mark style="background-color: rgb(255, 220, 209);">+</mark>"</code></p>



<ul><li>可以匹配 <code class="modern">"hi" "hii" "hiiiiii"</code></li><li>不能匹配 <code class="modern">"h"</code></li></ul>



<p>使用问号 <code class="modern">?</code> 可以匹配前一个字符 0 次或 1 次：</p>



<p><code class="modern">"colou<mark style="background-color: rgb(255, 220, 209);">?</mark>r"</code></p>



<ul><li>可以匹配 <code class="modern">"color" "colour"</code></li><li>不能匹配 <code class="modern">"colouur"</code></li></ul>



<p>还可以进一步指定匹配的次数：</p>



<p>使用 <code class="modern">{<em>n</em>}</code> 可以将前一个字符匹配 <code class="modern"><em>n</em></code> 次：</p>



<p><code class="modern">"hel<mark style="background-color: rgb(255, 220, 209);">{2}</mark>o"</code></p>



<ul><li>只能匹配 <code class="modern">"hello"</code></li></ul>



<p>使用 <code class="modern">{<em>n</em>,}</code> 可以将前一个字符匹配 <code class="modern"><em>n</em></code> 次，或任意比 <code class="modern"><em>n</em></code> 多的次数：</p>



<p><code class="modern">"no<mark style="background-color: rgb(255, 220, 209);">{3,}</mark>"</code></p>



<ul><li>可以匹配 <code class="modern">"nooo" "noooo" "nooooo"</code> ，或 <code class="modern">n</code> 后面跟上更多的 <code class="modern">o</code></li><li>不能匹配 <code class="modern">"noo" "no"</code></li></ul>



<p>使用 <code class="modern">{<em>n</em>,<em>m</em>}</code> 可以将前一个字符匹配 <code class="modern"><em>n</em></code> ~ <code class="modern"><em>m</em></code> 次，包含 <code class="modern"><em>n</em></code> 和 <code class="modern"><em>m</em></code> ：<br><code class="modern">"o<mark style="background-color: rgb(255, 220, 209);">{2,6}</mark>h"</code></p>



<ul><li>可以匹配 <code class="modern">"ooh" "ooooh" "ooooooh"</code></li><li>不能匹配 <code class="modern">"oh"</code></li><li>当 o 数量超过6个时，只能匹配最后的 <code class="modern">"ooooooh"</code></li></ul>



<hr class="wp-block-separator"/>



<p>除了指定次数，还可以指定字符范围：</p>



<p>方括号对 <code class="modern">[]</code> 用来指定一个字符，方括号内为该字符的限定条件：</p>



<p>使用 <code class="modern">[…]</code> 表示字符范围，可以匹配方括号内的所有字符。一对方括号只能表示一个字符：</p>



<p><code class="modern">"b<mark style="background-color: rgb(255, 220, 209);">[</mark>aeiou<mark style="background-color: rgb(255, 220, 209);">]</mark>d"</code></p>



<ul><li>只能匹配 <code class="modern">"bad" "bed" "bid" "bod" "bud"</code></li></ul>



<p>使用 <code class="modern">[^…]</code> 表示字符范围，可以匹配除方括号内字符的其余字符。一对方括号只能表示一个字符：<br><code class="modern">"n<mark style="background-color: rgb(255, 220, 209);">[^</mark>ot<mark style="background-color: rgb(255, 220, 209);">]</mark>r"</code></p>



<ul><li>可以匹配 <code class="modern">"nnr" "nar" "n1r" "n我r" "n&lt;r"</code></li><li>只不能匹配 <code class="modern">"nr" "nor" "ntr"</code></li><li>如果要匹配 <code class="modern">"n^r"</code> ，请不要加上方括号，或将 <code class="modern">^</code> 号移到方括号的其它位置</li></ul>



<p>特别地，字符 <code class="modern">.</code> 在方括号对内只代表 <code class="modern">.</code> 字符，相当于 <code class="modern">\.</code> ，而非匹配任意字符。</p>



<p>类似 <code class="modern">[0-9]</code> 、<code class="modern">[a-z]</code> 、<code class="modern">[A-Z]</code> 表示字符范围，可以匹配某个区间的所有数字或字母，包含区间两端。</p>



<p>减号 <code class="modern">-</code> 两端必须同时是数字、小写字母或大写字母，并且是按从小到大或字母表顺序排列（小数字或靠前的字母在前，大数字或靠后的字母在后），否则它们不会匹配到任何结果。</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">[</mark>U<mark style="background-color: rgb(255, 220, 209);">-</mark>Z<mark style="background-color: rgb(255, 220, 209);">][</mark>0<mark style="background-color: rgb(255, 220, 209);">-</mark>3<mark style="background-color: rgb(255, 220, 209);">][</mark>a<mark style="background-color: rgb(255, 220, 209);">-</mark>g<mark style="background-color: rgb(255, 220, 209);">]</mark>"</code></p>



<p>可以匹配 <code class="modern">"U3a" "Z2f" "Y0c"</code><br>不能匹配 <code class="modern">"A0c" "G3k" "u0g" "C9f"</code> 等</p>



<p>实际上 <code class="modern">\d</code> 等价于 <code class="modern">[0-9]</code> ，<code class="modern">\w</code> 等价于 <code class="modern">[a-zA-Z0-9_]</code> 。</p>



<h3 class="wp-block-heading" id="定位符号">定位符号</h3>



<p>某些符号可以用来限定位置，用于匹配特殊位置上的字符，而不能匹配一般位置上的同一字符。这样的符号一般称为<strong>定位符</strong>或<strong>锚点</strong>。</p>



<p>使用 <code class="modern">^</code> 号用在方括号对 <code class="modern">[]</code> 以外的其它地方，用来表示一行的开头位置，将匹配开头位置：</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">^</mark>12"</code></p>



<ul><li>只能匹配开头位置的 <code class="modern">"12"</code></li><li>不能匹配其余位置的 <code class="modern">"12"</code></li></ul>



<p>注意：要匹配开头位置，<code class="modern">^</code> 号应该位于字符串最前面，否则自相矛盾。</p>



<p>特别地，如果还希望能匹配上一行的字符，请在 <code class="modern">^</code> 号前使用换行符 <code class="modern">\n</code> 。</p>



<p>其等价于转义字符 <code class="modern">\A</code> 。</p>



<br>



<p>使用 <code class="modern">$</code> 号用来表示行末位置，将匹配一行的末尾：</p>



<p><code class="modern">"that<mark style="background-color: rgb(255, 220, 209);">$</mark>"</code></p>



<ul><li>只能匹配行末位置的 <code class="modern">"that"</code></li><li>不能匹配其余位置的 <code class="modern">"that"</code></li></ul>



<p>该符号同样应该位于字符串末尾。如果还希望能匹配下一行的字符，请在 <code class="modern">$</code> 号后使用换行符 <code class="modern">\n</code> 。</p>



<p>其等价于转义字符 <code class="modern">\Z</code> 。</p>



<p><code class="modern">^</code> 和 <code class="modern">\A</code> 、<code class="modern">$</code><code class="modern"></code> 和 <code class="modern">\Z</code> 是有区别的，当它们在“多行模式”下的匹配方式不同。可以参考后续介绍的<mark style="background-color:rgba(0, 0, 0, 0)" class="has-inline-color has-vivid-green-cyan-color">匹配模式</mark>。</p>



<p>使用 <code class="modern">\b</code> 匹配一个单词的边界。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项：</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">\b</mark>as"</code></p>



<ul><li>可以匹配以 <code class="modern">as</code> 开始的单词，例如 <code class="modern">"assert"</code> 中的 <code class="modern">as</code></li><li>不能匹配在单词中或单词末尾的 <code class="modern">as</code> ，例如 <code class="modern">"Las Vegas"</code> 中的两个 <code class="modern">as</code></li></ul>



<p>所谓“单词的边界”与空白符有一定区别：单词的边界可能是一行的开始，即便它前面没有任何空白或换行符。单词的边界还可能是一篇文章的末尾，尽管它后面没有任何空白、换行符、换页符等。除此之外，单词的边界还可以是一个符号：</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">\b</mark>emphasis<mark style="background-color: rgb(255, 220, 209);">\b</mark>"</code></p>



<ul><li>可以匹配 <code class="modern">"(emphasis)" "Warning:emphasis."</code> 中的 <code class="modern">emphasis</code></li><li>不能匹配 <code class="modern">"3emphasis"</code> 中的 <code class="modern">emphasis</code></li></ul>



<h3 class="wp-block-heading" id="捕获与引用">捕获与引用</h3>



<p>使用圆括号 <code class="modern">()</code> 可以指定一个子表达式，用来对表达式包含的内容进行区分。</p>



<p>使用单个竖线 <code class="modern">|</code> 代表“或”，代表该符号两侧的表达式都可以进行匹配：</p>



<p><code class="modern">"P<mark style="background-color: rgb(255, 220, 209);">(</mark>ython<mark style="background-color: rgb(255, 220, 209);">|</mark>HP<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<ul><li>只能匹配 <code class="modern">"Python" "PHP"</code></li></ul>



<p>在匹配过程中，为了不至于引起表意不清，请尽量使用圆括号 <code class="modern">(…)</code> 将子表达式括起来。</p>



<p>圆括号还有一个用途：默认情况下，圆括号会将表达式进行分组，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志（嵌套的表达式也是），第一个出现的分组的组号为 1 ，第二个为 2 ，以此类推。</p>



<p>特别地，第 0 组代表整个表达式捕获的内容本身。</p>



<hr class="wp-block-separator"/>



<p><strong>后向引用</strong>使用转义的数字用于重复搜索前面某个分组匹配的文本。例如，<code class="modern">\1</code> 代表分组 1 匹配的文本。</p>



<p><code class="modern">"\b<mark style="background-color: rgb(255, 220, 209);">(</mark>\w+<mark style="background-color: rgb(255, 220, 209);">)</mark>\b\s+<mark style="background-color: rgb(255, 220, 209);">\1</mark><mark style="background-color: rgb(255, 220, 209);">\b"</code></p>



<p>用来匹配重复的单词，其规则为：分组 1 必须要由至少一个字符组成，其组前和后必须为单词的边界（如空格、换行符等，或者什么也没有）；在经历了若干空格后，应该出现一个分组 1 对应的单词，并且该单词后应为单词的边界。换句话说，它匹配两个重复的单词。</p>



<ul><li>可以匹配 <code class="modern">"是 是" " go go"</code></li><li>不能匹配 <code class="modern">"age ago" "mere merely"</code></li></ul>



<p>如果使用 <code class="modern">\0</code> 则引用整个被匹配的正则表达式本身。</p>



<p>分组引用一般用于匹配对称、重复但不确定的字符串，如 HTML 的开始和结束标签。</p>



<p>注意：</p>



<ol><li>引用不能引用其自身，如 <code class="modern">"([a-z]<mark style="background-color: rgb(255, 220, 209);">\1</mark>)"</code> 是错误的，它匹配不到任何结果。同样，<code class="modern">\0</code> 代表正则表达式匹配本身，所以不能在正则表达式中引用，只能用于之后的其余操作中，如替换等。</li><li>引用不能用于方括号内的字符集内部，如 <code class="modern">"[<mark style="background-color: rgb(255, 220, 209);">\1</mark>b]"</code> 是不恰当的，其引用 <code class="modern">\1</code> 会被正则表达式解释为八进制转码。</li><li>由于圆括号匹配到的内容可能是不确定的，所以当圆括号没有匹配到任何内容时，其引用也无效，即引用的内容为空。</li><li>当对组使用重复操作符时，缓存里的引用内容会被不断刷新，只保留最近匹配的项目。例如 <code class="modern">"<mark style="background-color: rgb(255, 220, 209);">(</mark>[abc]+<mark style="background-color: rgb(255, 220, 209);">)</mark>=<mark style="background-color: rgb(255, 220, 209);">\1</mark>"</code> 可能匹配 <code class="modern">"cab=cab"</code> ，但是 <code class="modern">"<mark style="background-color: rgb(255, 220, 209);">(</mark>[abc]<mark style="background-color: rgb(255, 220, 209);"><code>)</code></mark>+=<mark style="background-color: rgb(255, 220, 209);">\1</mark>"</code> 则不匹配 <code class="modern">"cab=cab"</code> ，这是由于 <code class="modern">([abc])</code> 第一次匹配到 <code class="modern">"c"</code> 时，<code class="modern">"\1"</code> 代表 <code class="modern">"c"</code> ，然后 <code class="modern">([abc])</code> 会继续匹配 <code class="modern">"a"</code> 和 <code class="modern">"b"</code> ，最后缓存刷新的结果为 <code class="modern">"\1"</code> 代表 <code class="modern">"b"</code> ，所以它会匹配 <code class="modern">"cab=b"</code> 。</li></ol>



<p>也可以使用 <code class="modern">(?P&lt;<em>name</em>&gt;<em>exp</em>)</code> 自己指定子表达式的组名，这样就把表达式 <code class="modern"><em>exp</em></code> 的组名指定为 <code class="modern"><em>name</em></code> 了。要反向引用这个分组捕获的内容，可以使用 <code class="modern">(?P=<em>name</em>)</code> 。</p>



<p>所以上一个例子也可以写成这样：</p>



<p><code class="modern">"\b<mark style="background-color: rgb(255, 220, 209);">(?P&lt;</mark>repeat<mark style="background-color: rgb(255, 220, 209);">&gt;</mark>\w+<mark style="background-color: rgb(255, 220, 209);">)</mark>\b\s+<mark style="background-color: rgb(255, 220, 209);">(?P=</mark>repeat<mark style="background-color: rgb(255, 220, 209);">)</mark>\b"</code></p>



<p>但用圆括号会有一个副作用，使相关的匹配会被缓存，造成匹配速度偏慢。若不需要给捕获的表达式分组，可以使用 <code class="modern">(?:<em>exp</em>)</code> ，它会正常匹配表达式 <code class="modern"><em>exp</em></code> ，但不会给此分组分配组号。</p>



<p><code class="modern">"C<mark style="background-color: rgb(255, 220, 209);">(?:</mark>12|34<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<ul><li>会匹配所有的 <code class="modern">"C12"</code> 或 <code class="modern">"C34"</code> ，并且不将 <code class="modern">"12"</code> 或 <code class="modern">"34"</code> 分组。</li></ul>



<hr class="wp-block-separator"/>



<p>当拥有了一个组名或者组编号时，可以使用 <code class="modern">(?(<em>id/name</em>)<em>yes</em>|<em>no</em>)</code> 来表示一个 <strong>yes/no pattern</strong> 。</p>



<p>其规则为：如果 <code class="modern"><em>id/name</em></code> 对应的组成功匹配，则继续匹配 <code class="modern"><em>yes</em></code> 部分对应的正则表达式；如果 <code class="modern"><em>id/name</em></code> 对应的组匹配失败，则会匹配 <code class="modern"><em>no</em></code> 对应的表达式。</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">(?P</mark>a candy<mark style="background-color: rgb(255, 220, 209);">)</mark>?<mark style="background-color: rgb(255, 220, 209);">(?(</mark>group<mark style="background-color: rgb(255, 220, 209);">)</mark> is true<mark style="background-color: rgb(255, 220, 209);">|</mark> is false<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<ul><li>如果成功匹配到了 <code class="modern">"a candy"</code> ，则会继续匹配到 <code class="modern">"a candy is true"</code></li><li>如果没有匹配到 <code class="modern">"a candy"</code> ，由于组括号后存在一个 <code class="modern">?</code> ，它会允许该组匹配的结果为 0 次，转而匹配 <code class="modern">" is false"</code></li></ul>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">(</mark>a candy<mark style="background-color: rgb(255, 220, 209);">)</mark>?<mark style="background-color: rgb(255, 220, 209);">(?(</mark>1<mark style="background-color: rgb(255, 220, 209);">)</mark> (makes me) happy<mark style="background-color: rgb(255, 220, 209);">|</mark>unhappy<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<p>如果成功匹配到了 <code class="modern">"a candy"</code> ，则会继续匹配到 <code class="modern">"a candy makes me happy"</code> ，其中 <code class="modern">"a candy"</code> 是组 1，<code class="modern">"makes me"</code> 是组 2。<br>如果没有匹配到 <code class="modern">"a candy"</code> 或 <code class="modern">"a candy makes me"</code> ，则会直接匹配 <code class="modern">"unhappy"</code> 。</p>



<p>从上述例子可以看出，使用 yes/no pattern 有一个细节就是要在组括号后使用 <code class="modern">?</code> 限定符来表示当没有匹配成功时可以忽略该组，从而正确地匹配到 no pattern 的表达式。</p>



<h3 class="wp-block-heading" id="非捕获元">非捕获元</h3>



<p>非捕获元会被匹配，但不会被分到实际捕获的组内（实际不占用捕获的字符），它主要用于定位。</p>



<p><strong>正向零宽断言</strong>的格式为 <code class="modern"><em>exp1</em>(?=<em>exp2</em>)</code> ，用来匹配并捕获 <code class="modern"><em>exp2</em></code> 前面的 <code class="modern"><em>exp1</em></code> ：</p>



<p><code class="modern">"https?<mark style="background-color: rgb(255, 220, 209);">(?=</mark>://<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<p>只能匹配 <code class="modern">"http://"</code> 或 <code class="modern">"https://"</code> 中的 <code class="modern">"http"</code> 或 <code class="modern">"https"</code><br>不能匹配单独的 <code class="modern">"http"</code> ，即便在其余某处又出现了不紧邻的 <code class="modern">"://"</code></p>



<p><strong>反向零宽断言</strong>的格式为 <code class="modern">(?&lt;=<em>exp2</em>)<em>exp1</em></code> ，用来匹配并捕获 <code class="modern"><em>exp2</em></code> 后面的 <code class="modern"><em>exp1</em></code> ：</p>



<p><code class="modern"><mark style="background-color: rgb(255, 220, 209);">(?&lt;=</mark>&lt;a&gt;<mark style="background-color: rgb(255, 220, 209);">)</mark>.+<mark style="background-color: rgb(255, 220, 209);">(?=</mark>&lt;/a&gt;<mark style="background-color: rgb(255, 220, 209);">)</mark></code></p>



<ul><li>可以匹配一个无属性的HTML <code class="modern">&lt;a&gt;</code><code class="modern"></code> 标签中的内容</li><li>不会匹配到标签本身，但会匹配到里面嵌套标签的完整内容</li><li>一个细节可能导致匹配会造成出乎意料的结果，详见 <mark style="background-color:rgba(0, 0, 0, 0)" class="has-inline-color has-vivid-green-cyan-color">贪婪匹配与懒惰匹配</mark> 的相关内容</li></ul>



<p><strong>正向否定零宽断言</strong>可以使用 <code class="modern"><em>exp1</em>(?!<em>exp2</em>)</code> 来匹配并捕获后面不是 <code class="modern"><em>exp2</em></code> 的 <code class="modern"><em>exp1</em></code> ：</p>



<p><code class="modern">"name<mark style="background-color: rgb(255, 220, 209);">(?!</mark>error<mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<ul><li>只不匹配 <code class="modern">"nameerror"</code> 中的 <code class="modern">"name"</code></li><li>对于其它的 <code class="modern">"name"</code> 都可以匹配</li></ul>



<p><strong>反向否定零宽断言</strong>可以使用 <code class="modern">(?&lt;!<em>exp2</em>)<em>exp1</em></code> 来匹配并捕获前面不是 <code class="modern"><em>exp2</em></code> 的 <code class="modern"><em>exp1</em></code> ：</p>



<p><code class="modern">"<mark style="background-color: rgb(255, 220, 209);">(?&lt;!</mark>eco<mark style="background-color: rgb(255, 220, 209);">)</mark>system"</code></p>



<ul><li>只不匹配 <code class="modern">"ecosystem"</code> 中的 <code class="modern">"system"</code></li><li>对于其它的 <code class="modern">"system"</code> 都可以匹配</li></ul>



<hr class="wp-block-separator"/>



<p>在编写正则表达式时，也可以用 <code class="modern">(?#<em style="font-weight: 300;">comment</em>)</code> 代表注释。这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读：</p>



<p><code class="modern">"[0-9][a-g]<mark style="background-color: rgb(255, 220, 209);">(?#</mark><em style="font-weight: 300;">between 0a~9g</em><mark style="background-color: rgb(255, 220, 209);">)</mark>"</code></p>



<p>提示并匹配第一位 0 到 9 ，第二位 a 到 g 的所有字符串。注释内的内容不参与匹配，不造成分组，不产生任何影响。</p>



<h2 class="wp-block-heading" id="使用细节">使用细节</h2>



<h3 class="wp-block-heading" id="特殊字符">特殊字符</h3>



<p>特殊字符为正则表达式中出现的，用来表示匹配规律的词。为了使在匹配过程中能将其当做一个字符而不是表达式进行匹配，必须要用反斜杠 <code class="modern">\</code><code class="modern"></code> 进行转义。</p>



<p>以下为常见的特殊字符：</p>



<p><code class="modern">(){}[]$^*+?.|\</code></p>



<p>除此之外，某些普通字符一旦被转义，含义与原先也截然不同。这点也很好理解，比如常见的字符 <code class="modern">n</code> 在大多数语言中的转义结果都是换行符 <code class="modern">\n</code> 。</p>



<hr class="wp-block-separator"/>



<p>非打印字符指的是肉眼不可视，却又因为排版原因而必要存在的字符。为了使用非打印字符，必须用\进行转义。</p>



<p>以下为常见的非打印字符：</p>



<figure class="wp-block-table"><table><tbody><tr><td><code class="modern">\c<em>X</em></code></td><td>匹配由 <code class="modern"><em>X</em></code> 指明的控制字符。例如，<code class="modern">\cM</code> 匹配一个 Control-M 或回车符。<code class="modern"><em>X</em></code> 的值必须为 A-Z 或 a-z 之一。否则，将 <code class="modern">c</code> 视为一个原义的 <code class="modern">'c'</code> 字符。</td></tr><tr><td><code class="modern">\x<em>NN</em></code></td><td>匹配十六进制数字 <code class="modern"><em>NN</em></code> 对应的字符</td></tr><tr><td><code class="modern">\n</code></td><td>匹配一个换行符。等价于 <code class="modern">\x0a</code> 或 <code class="modern">\cJ</code></td></tr><tr><td><code class="modern">\f</code></td><td>匹配一个换页符。等价于 <code class="modern">\x0c</code> 或 <code class="modern">\cL</code></td></tr><tr><td><code class="modern">\r</code></td><td>匹配一个回车符。等价于 <code class="modern">\x0d</code> 或 <code class="modern">\cM</code></td></tr><tr><td><code class="modern">\s</code></td><td>匹配任何空白字符，包括空格、制表符、换行、换页符等等。等价于表达式 <code class="modern">[ \f\n\r\t\v]</code>（注意空格）。另外注意使用 Unicode 的正则表达式会匹配全角空格符。</td></tr><tr><td><code class="modern">\t</code></td><td>匹配一个制表符。等价于 <code class="modern">\x09</code> 或 <code class="modern">\cI</code></td></tr><tr><td><code class="modern">\v</code></td><td>匹配一个垂直制表符。等价于 <code>\x0b</code> 或 <code class="modern">\cK</code></td></tr><tr><td><code class="modern">\u</code></td><td>匹配一个 Unicode 字符</td></tr></tbody></table></figure>



<p>有时需要查找不属于某个能简单定义的字符类的字符，这时需要用到转义字符的<strong>反义</strong>：</p>



<figure class="wp-block-table"><table><tbody><tr><td><code class="modern">\W</code></td><td>匹配任意不是字母，数字，下划线，汉字的字符，等价于表达式 <code class="modern">[^\w]</code></td></tr><tr><td><code class="modern">\D</code></td><td>匹配任意非数字的字符，等价于表达式 <code class="modern">[^\d]</code></td></tr><tr><td><code class="modern">\S</code></td><td>匹配任何非空白字符，等价于表达式 <code class="modern">[^\s]</code></td></tr><tr><td><code class="modern">\B</code></td><td>匹配不是单词开头或结束的位置，等价于表达式 <code class="modern">[^\b]</code></td></tr></tbody></table></figure>



<p>也就是说，将这些字母变成大写，就代表对应的不匹配。</p>



<p>另外，匹配汉字的正则表达式为：</p>



<p><code class="modern">"[<mark style="background-color: rgb(255, 220, 209);">\u</mark>4e00-<mark style="background-color: rgb(255, 220, 209);">\u</mark>9fa5]"</code></p>



<p>在支持 Unicode 编码的环境中，也可以直接使用汉字精确匹配。</p>



<h3 class="wp-block-heading" id="运算符优先级">运算符优先级</h3>



<p>在正则表达式中，运算符的优先级别从最高到最低为：</p>



<ul><li>转义符 <code class="modern">\</code> 的优先级别最高，即默认字符最先发生转义</li><li>方括号 <code class="modern">[]</code> 和各种圆括号 <code class="modern">()</code> 、<code class="modern">(?:)</code> 、<code class="modern">(?=)</code> 等。因此为了表意清晰，最好多使用括号。</li><li>六种限定符，分别是 <code class="modern">*</code> 、<code class="modern">+</code> 、<code class="modern">?</code> 、<code class="modern">{<em>n</em>}</code> 、<code class="modern">{<em>n</em>,}</code> 、<code class="modern">{<em>n</em>,<em>m</em>}</code></li><li>任何字符和表达任意单个字符的匹配项，如 <code class="modern">^</code> 、<code class="modern">$</code> 和任意转义后的字符</li><li><code class="modern">|</code> ，即“或”逻辑字符。任意用该字符隔开的表达式都是一个完整的匹配项</li></ul>



<h3 class="wp-block-heading" id="匹配模式-贪婪与懒惰">匹配模式：贪婪与懒惰</h3>



<p id="精确匹配"><strong>精确匹配</strong></p>



<p>在正则表达式中，匹配普通字符、普通字符族 <code class="modern">[…]</code> 和转义字符 <code class="modern">\x</code> 的方式都是精确匹配：正则表达式会按照给定的字符串逐个检索字符，每当检索到一个字符在要匹配的字符内，则将该字符标记为匹配成功，并继续向后检索。</p>



<p>正则表达式匹配字符串的方式也是精确匹配：正则表达式会先匹配第一个字符，如果第一个字符匹配成功，则会继续向后逐个检查字符是否匹配。如果每个字符都匹配成功，则记录为一个成功匹配的字符串，并继续向下检索第一个字符，以此类推。</p>



<p><strong>贪婪匹配</strong></p>



<p>正则表达式除了精确匹配外，默认使用贪婪匹配。所谓贪婪匹配，指的是一种尽可能多的匹配字符的匹配模式。</p>



<p>正则表达式的六种限定符 <code class="modern">*</code> 、<code class="modern">+</code> 、<code class="modern">?</code> 、<code class="modern">{<em>n</em>}</code> 、<code class="modern">{<em>n</em>,}</code> 、<code class="modern">{<em>n</em>,<em>m</em>}</code> ，它们会尽可能多的匹配前一个字符。例如：</p>



<p><code class="modern">"10<mark style="background-color: rgb(255, 220, 209);">+</mark>"</code></p>



<ul><li>对于 1 后面跟着无论多少个零（没有除外），它会将 1 和后面的 0 全部匹配，而不是只匹配确定个 0</li></ul>



<p><code class="modern">"&lt;.<mark style="background-color: rgb(255, 220, 209);">+</mark>&gt;"</code></p>



<ul><li>给定一个字符串 <code class="modern">"&lt;book&gt;&lt;title&gt;Python Programming&lt;/title&gt;&lt;/book&gt;"</code> ，它会匹配这个字符串全部，而不仅仅是第一个起始标签，因为整个字符串本身满足这个规则</li></ul>



<p>其贪婪匹配的原理为：正则表达式会先匹配精确字符 <code class="modern">"&lt;"</code> ，然后贪婪匹配字符 <code class="modern">"."</code> ，直至换行符 <code class="modern">"\n"</code> 不能匹配该字符，然后正则表达式开始从后向前匹配字符 <code class="modern">"</code>"&gt;" ，直至匹配成功，则它会将该范围内的字符全部匹配。</p>



<p><code class="modern">"is<mark style="background-color: rgb(255, 220, 209);">{3,6}</mark>"</code></p>



<ul><li>也是遵循这样的匹配方式，如果 i 后面跟着足够多的 s ，正则表达式也会匹配 i 和尽可能多的 s ，直至匹配满 6 个 s 的 <code class="modern">"issssss"</code></li></ul>



<p><strong>懒惰匹配</strong></p>



<p>贪婪匹配可能会导致过多的内容被匹配到，例如：</p>



<p><code class="modern">"(?&lt;=href=").<mark style="background-color: rgb(255, 220, 209);">+</mark>(?=")"</code></p>



<p>本意是想匹配 <code class="modern">href</code> 属性内的值，但贪婪匹配的规则会让符号 <code class="modern">.</code> 一路匹配下去，遇到引号 <code class="modern">"</code> 也不不会停下，直到遇到段尾，为了满足语法再回溯找到遇到的最后一个引号 <code class="modern">"</code> 停在之前。可以预料到，后面几个属性的内容也会被匹配进去。</p>



<p>这就是懒惰匹配的用途。懒惰匹配与贪婪匹配相反，它是一种尽可能少的匹配字符的匹配模式。</p>



<p>懒惰匹配只针对六种限定符 <code class="modern">*</code> 、<code class="modern">+</code> 、<code class="modern">?</code> 、<code class="modern">{n}</code> 、<code class="modern">{<em>n</em>,}</code> 、<code class="modern">{<em>n</em>,<em>m</em>}</code> ，要使用懒惰匹配非常简单，只要在限定符后面再加上一个问号 <code class="modern">?</code> 即可。</p>



<p>也就是说，六种限定符对应的懒惰匹配模式分别为：<code class="modern">*?</code> 、<code class="modern">+?</code> 、<code class="modern">??</code> 、<code class="modern">{<em>n</em>}?</code> 、<code class="modern">{<em>n</em>,}?</code> 、<code class="modern">{<em>n</em>,<em>m</em>}?</code> 。</p>



<p>例如：</p>



<p><code class="modern">"20<mark style="background-color: rgb(255, 220, 209);">*?</mark>"</code></p>



<ul><li>对于 2 后面跟着无论多少个零，只要 2 后面有跟着 0 ，它会忽略后面的 0 ，只匹配 <code class="modern">"2"</code></li></ul>



<p>对于上述例子 <code class="modern">"&lt;book&gt;&lt;title&gt;Python Programming&lt;/book&gt;&lt;/title&gt;"</code> ，使用懒惰匹配模式：</p>



<p><code class="modern">"&lt;.<mark style="background-color: rgb(255, 220, 209);">+?</mark>&gt;"</code></p>



<ul><li>则只会匹配最先出现的 <code class="modern">"&lt;book&gt;"</code></li></ul>



<p>类似地：</p>



<p><code class="modern">"py<mark style="background-color: rgb(255, 220, 209);">{3,}?</mark>"</code></p>



<p>不管 p 后面跟着多少个 y ，只要 y 的个数不低于3个，那么正则表达式便会且仅会匹配最开始的 <code class="modern">"pyyy"</code></p>



<h3 class="wp-block-heading" id="修饰符">修饰符</h3>



<p>修饰符(modifier)可以改变正则表达式的一些规则，来适应不同的使用场景。</p>



<p>下表列举了比较广泛支持的一些修饰符：</p>



<figure class="wp-block-table"><table><tbody><tr><td><code class="modern">m</code>（多行模式）</td><td>在许多编程语言里，<code class="modern">^</code> 和 <code class="modern">$</code> 只会给定匹配字符串的开始和末尾。多行模式可以让这两个字符匹配一行的开始和末尾。</td></tr><tr><td><code class="modern">i</code>（不区分大小写）</td><td>匹配英文字符时将不区分大小写</td></tr><tr><td><code class="modern">x</code>（冗长模式）</td><td>冗长模式专门用于将复杂的正则表达式表达得美观。这种模式下，会忽略正则表达式内的空格并将一行中 <code class="modern">#</code> 号及以后后的部分视为注释（除非使用转义符强制匹配），这样可以将一条正则表达式分为多个部分展示</td></tr><tr><td><code class="modern">s</code>（单行模式）</td><td>该模式下点号 <code class="modern">.</code> 会匹配所有字符，包括换行符</td></tr><tr><td><code class="modern">u</code>（Unicode模式）</td><td>该模式下会强制启用并使用 Unicode 理解下的字符。例如，使用拉丁字母会同时匹配所有变音的字符类，<code class="modern">\d</code> 会匹配全角数字（注意，一些使用Unicode字符串的编程语言会默认开启该模式，这是一个很隐秘的坑）</td></tr></tbody></table></figure>



<p>正则表达式原生支持如下两种修饰符的用法：</p>



<p><strong>内联修饰符</strong>：格式为 <code class="modern">(?<em>flags</em>-<em>flags</em>)</code> ，作用于整个正则表达式对象，会启用减号前所有的修饰符，并停用减号后所有的修饰符（如果不需要停用，则减号可以忽略）。</p>



<p><strong>局部内联修饰符</strong>：格式为 <code class="modern">(?<em>flags</em>-<em>flags</em>:<em>expression</em>)</code> ，用法类似，仅作用于括号内的 <code class="modern"><em>expression</em></code> 。</p>



<br>



<p>以上就是正则表达式的基本用法。对于不同的编程语言，其构造方式、语法细节（如分组引用格式）、支持的修饰符都有部分不同。例如PHP支持正则表达式的递归，DotNet（C#）支持类似栈的平衡组，甚至能用来平衡左右两侧的符号。不管如何，在使用正则表达式之前，请参阅相关语言对正则表达式支持的相关文档。</p>



<p>正则表达式只是一个类似于XPath的工具，它在许多要处理文本的情况下都会用到，例如格式修改、数据清洗，甚至用在编译器的词法分析工具。正则表达式也在不断发展，变得越来越强大。</p>



<h2 class="wp-block-heading" id="参考资料">参考资料</h2>



<p><a href="https://regexr.com/">https://regexr.com/</a></p>



<p>一个在线正则表达式测试工具，包含可视化的词法分析、语法参考，提供了一些常用正则表达式</p>



<p><a href="https://regex101.com/">https://regex101.com/</a></p>



<p>一个非常强大的在线正则表达式测试工具，它提供了详细的可视化词法分析、匹配组信息、语法参考、错误分析，可以使用替换甚至单元测试工具。并且它能支持不同的编程语言，还能为常用的编程语言直接生成相应的代码</p>



<p><a href="https://www.regular-expressions.info/">https://www.regular-expressions.info/</a></p>



<p>一个非常详细的正则表达式参考网站，提供了包括入门、实现细节、使用示例、缺陷说明的完整的介绍，并提供了大部分支持正则表达式编程语言的特性对比，堪称正则表达式的百科全书</p>



<p><a href="https://alf.nu/RegexGolf">https://alf.nu/RegexGolf</a></p>



<p>一个有趣的在线正则表达式闯关游戏，只有匹配了规定的字符串才算通过，并会根据使用正则表达式的长度打分。</p>



<p><a href="https://docs.python.org/3/library/re.html">https://docs.python.org/3/library/re.html</a></p>



<p>Python3正则表达式语言参考</p>



<p><a href="https://docs.microsoft.com/dotnet/standard/base-types/regular-expressions">https://docs.microsoft.com/dotnet/standard/base-types/regular-expressions</a></p>



<p>DotNet正则表达式语言参考</p>



<p><a href="https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>



<p>JavaScript正则表达式语言参考</p>



<p><a href="https://www.cplusplus.com/reference/regex/">https://www.cplusplus.com/reference/regex/</a></p>



<p>C++正则表达式语言参考</p>



<p><a href="https://www.php.net/manual/ref.pcre.php">https://www.php.net/manual/ref.pcre.php</a></p>



<p>PHP正则表达式语言参考<mark style="background-color: rgb(255, 220, 209);"></p>
<p><a rel="nofollow" href="/archives/124">正则表达式简单入门</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/124/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Python3 字符串格式化</title>
		<link>/archives/119</link>
					<comments>/archives/119#respond</comments>
		
		<dc:creator><![CDATA[Hello]]></dc:creator>
		<pubDate>Tue, 22 Feb 2022 16:13:21 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[编程语言]]></category>
		<guid isPermaLink="false">/?p=119</guid>

					<description><![CDATA[<p>所谓格式化，指将现有的数据组成得到一个完整的字符串用&#46;&#46;&#46;</p>
<p><a rel="nofollow" href="/archives/119">Python3 字符串格式化</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></description>
										<content:encoded><![CDATA[
<p>所谓<strong>格式化</strong>，指将现有的数据组成得到一个完整的字符串用于输出、传参等的方式。Python2中，通常使用百分号的方式来对字符串进行格式化操作。例如：</p>



<div class="vscode-block" style="color: #405c79; background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am </span><span style="color: #bf8b56;">%s</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%d</span><span style="color: #56bf8b;"> years old.</span><span style="color: #405c79;">'</span><span style="color: #405c79;"> % (</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am Jack, 17 years old.</span><span style="color: #405c79;">'</span></div></div>



<p>这种方式来源于C语言的 <code class="traditional">printf()</code> 等所使用的转换说明，这么做不够灵活，格式化较为麻烦。Python3中更新了一种更为现代化的格式化方法，可以更方便地达到预期的输出效果。</p>



<h2 class="wp-block-heading" id="python3中的格式化">Python3中的格式化</h2>



<h3 class="wp-block-heading" id="使用str-format-方法">使用str.format()方法</h3>



<p>Python3中格式化的基本思路是：在字符串中待格式数据用花括号对“ <code class="traditional">{}</code> ”占位，在格式化时再用实际的内容替换。<code class="traditional">str.format()</code>&nbsp;方法告诉字符串中的花括号对用哪些数据替换。该方法格式化的一个基本示例为：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;"> years old</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am Jack, 17 years old</span><span style="color: #405c79;">'</span></div></div>



<p>使用这种方式对字符串格式化更加强大。在这个基本的示例中，它也非常直观地表明了如何进行格式化。</p>



<hr class="wp-block-separator"/>



<p>使用 <code class="traditional">str.format()</code>&nbsp;格式化的第一个优点是，它能充分利用提供的数据。</p>



<p>例如，可以在花括号内设置一个整数，代表使用哪一个格式数据填充这部分内容：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">He is </span><span style="color: #bf8b56;">{0}</span><span style="color: #56bf8b;">. </span><span style="color: #bf8b56;">{0}</span><span style="color: #56bf8b;"> is </span><span style="color: #bf8b56;">{1}</span><span style="color: #56bf8b;"> years old.</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">He is Jack. Jack is 17 years old.</span><span style="color: #405c79;">'</span></div></div>



<p>除了这种按位置的接收参数方式，还可以使用按关键字的接收参数方式：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">item </span><span style="color: #bf8b56;">{a}</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">{and_another}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">a</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">1</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">and_another</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">1.234</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">item 1, 1.234</span><span style="color: #405c79;">'</span></div></div>



<p>它们可以在同一个格式字符串中混合使用。</p>



<p>由于字符串内的花括号被用来确定格式数据的位置，可以用重复的花括号“ <code class="traditional">{{</code>&nbsp;”和“ <code class="traditional">}}</code> ”来代表格式字符串内原始的花括号字符：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use {{}} to format </span><span style="color: #bf8b56;">{}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">string</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;"> to format string</span><span style="color: #405c79;">'</span></div></div>



<p>百分号格式字符串支持的调整精度、宽度、对齐、符号等，<code class="traditional">str.format()</code>&nbsp;也全部支持。以下是部分示例：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #bf568b;font-weight: bold;">from</span><span style="color: #405c79;"> math </span><span style="color: #bf568b;font-weight: bold;">import</span><span style="color: #405c79;"> e</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">natural logarithm is <span style="color: #bf8b56;">{:+10.4}</span></span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(e)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">natural logarithm is &nbsp; &nbsp; +2.718</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">{:#x}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">1000</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">0x3e8</span><span style="color: #405c79;">'</span></div></div>



<h3 class="wp-block-heading" id="格式化的完整语法">格式化的完整语法</h3>



<p>一个花括号内可以包含许多控制用的说明，它们决定了如何对填充的内容设置格式。格式化修饰符的完整语法为：</p>



<p class="has-text-align-center"><code class="traditional">{[key][!flag][:[[fill]align][sign][#][0][minwidth][.precision][type]]}</code></p>



<p>方括号代表里面的内容作为整体是可选的。注意它们从左至右的位置。</p>



<ul><li><code class="traditional">key</code>&nbsp;代表用哪一个数据来填入该位置：</li></ul>



<p>它可以是整数，也可以是标识符。由于格式方法的完整结构是 <code class="traditional">str.format(self, *args, **kwargs)</code> ，整数告诉格式字符串从 <code class="traditional">args</code>&nbsp;元组内寻找元素，标识符告诉格式字符串从 <code class="traditional">kwargs</code>&nbsp;字典内寻找元素。</p>



<p>这种方式直接引用的对象，甚至可以再次通过“ <code class="traditional">.</code> ”运算符或“ <code class="traditional">[]</code> ”运算符取值：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use </span><span style="color: #bf8b56;">{0.__name__}</span><span style="color: #56bf8b;">, get </span><span style="color: #bf8b56;">{1[value]}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span></div><div><span style="color: #405c79;">... &nbsp; &nbsp; </span><span style="color: #8b56bf;">divmod</span><span style="color: #405c79;">, {</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">value</span><span style="color: #405c79;">'</span><span style="color: #405c79;">: (</span><span style="color: #bf8b56;">10.3</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">2</span><span style="color: #405c79;">)})</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use divmod, get (10.3, 2)</span><span style="color: #405c79;">'</span></div></div>



<ul><li><code class="traditional">!flag</code> 是一个<strong>显式转换</strong>标志。这个显式转换标志用于最先对被格式的数据变为标准的字符串对象：</li></ul>



<p><code class="traditional">!s</code>&nbsp;会用 <code class="traditional">str()</code>&nbsp;函数处理数据，得到对象的详细信息；<br><code class="traditional">!r</code> 会用 <code class="traditional">repr()</code> 函数处理数据，得到对象的描述信息；<br><code class="traditional">!a</code> 会用 <code class="traditional">acsii()</code> 函数处理数据，得到 ASCII 字符串。</p>



<p>例如，如果要让替换的字符串加上引号，可以使用 <code class="traditional">!r</code> 修饰它：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The type of ... is </span><span style="color: #bf8b56;">{!r}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">list</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">"</span><span style="color: #56bf8b;">The type of ... is 'list'</span><span style="color: #405c79;">"</span></div></div>



<p>接下来的冒号后面引导了一些标准的<strong>格式说明符</strong>(format specifier)，它们有：</p>



<ul><li><code class="traditional">align</code>&nbsp;代表在该位置比较宽时，数据是如何对齐的。该选项提供的值有：</li></ul>



<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">&lt;</code></td><td>左对齐</td></tr><tr><td><code class="traditional">&gt;</code></td><td>右对齐</td></tr><tr><td><code class="traditional">^</code></td><td>居中对齐</td></tr><tr><td><code class="traditional">=</code></td><td>一种对数字的特殊对齐方式，数字右对齐，但符号在最左侧</td></tr></tbody></table></figure>



<p>对最后一种对齐方式的直观演示如下：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: </span><span style="color: #bf8b56;">{:=10}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">15.02</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: - &nbsp; &nbsp;15.02</span><span style="color: #405c79;">'</span></div></div>



<ul><li>如果给定了对齐方式，那么 <code class="traditional">fill</code>&nbsp;表示对齐后剩下的位置该填充什么字符。默认情况下，剩余的部分用空格代替。</li></ul>



<p>对以上格式化稍作修改，它会美观很多：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: </span><span style="color: #bf8b56;">{:0=10}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">15.02</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: -000015.02</span><span style="color: #405c79;">'</span></div></div>



<ul><li><code class="traditional">sign</code>&nbsp;选项告诉格式字符串如何处理数字的符号位：</li></ul>



<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">+</code></td><td>正数前面加上正号“ <code class="traditional">+</code> ”，负数前面加上符号“ <code class="traditional">-</code> ”</td></tr><tr><td><code class="traditional">-</code></td><td>只需要在负数前加上负号“ <code class="traditional">-</code> ”即可</td></tr><tr><td>空格</td><td>在负数前加上负号“ <code class="traditional">-</code> ”；同时为了对齐，在正数前加一个空格</td></tr></tbody></table></figure>



<ul><li><code class="traditional">#</code> 字符如果使用，可以处理不同进制的数字，在前面加上“ <code class="traditional">0b</code> ”、“ <code class="traditional">0o</code> ”、“ <code class="traditional">0x</code> ”等前缀。</li></ul>



<ul><li><code class="traditional">minwidth</code>&nbsp;选项代表该位置的最小宽度：</li></ul>



<p>前面的对齐和填充选项就是基于该最小宽度设置的。如果格式后该位置拥有的字符数仍然无法填满这个最小宽度，那么对齐和填充才有意义。</p>



<p>所谓的“最小”表示如果已经比这个最小值还宽了，那就可以忽略它，按正常的宽度排列内容。</p>



<p>还有一种特殊的情况是，如果该宽度值被写成“ <code class="traditional">0</code> ”打头的数字，那么它会使用一种特殊的“零填充(zero-padding)”方式。具体来说，它等价于使用“ <code class="traditional">=</code> ”的对齐并用“ <code class="traditional"><code class="traditional">0</code></code> ”字符填充。例如：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">{:010}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">30</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">-000000030</span><span style="color: #405c79;">'</span></div></div>



<ul><li><code class="traditional">.precision</code> 表示小数显示多少位数。如果不用在小数上，表示最多显示多少字符。</li></ul>



<ul><li><code class="traditional">type</code> 选项告诉格式字符串数据用什么类型展示：</li></ul>



<p>对于整数，可以用以下选项将它解释成：</p>



<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">b</code></td><td>二进制数字</td><td><code class="traditional">d</code>（默认）</td><td>十进制数字</td></tr><tr><td><code class="traditional">o</code></td><td>八进制数字</td><td><code class="traditional">c</code></td><td>对应位置的Unicode字符</td></tr><tr><td><code class="traditional">x</code></td><td>十六进制数字</td><td><code class="traditional">n</code></td><td>数字。相比通用的 <code class="traditional">d</code>&nbsp;选项，它可能会根据本地化做一些表示方面的调整</td></tr><tr><td><code class="traditional">X</code></td><td>全部大写的十六进制数字，包括可能的前缀</td><td></td><td></td></tr></tbody></table></figure>



<p>对于浮点数，可以用以下选项将它解释成：</p>



<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">e</code></td><td>使用带“ <code class="traditional">e</code> ”的科学计数法表示浮点数</td><td><code class="traditional">g</code>（默认）</td><td>哪种方式表示更清晰，就用哪种方式</td></tr><tr><td><code class="traditional">E</code></td><td>大写版本的“ <code class="traditional">e</code> ”</td><td><code class="traditional">G</code></td><td>大写版本的“ <code class="traditional">g</code> ”</td></tr><tr><td><code class="traditional">f</code></td><td>使用小数点形式表示浮点数</td><td><code class="traditional">n</code></td><td>浮点数。相比通用的 <code class="traditional">g</code>&nbsp;选项，它可能会根据本地化做一些表示方面的调整</td></tr><tr><td><code class="traditional">F</code></td><td>大写版本的“ <code class="traditional">f</code> ”</td><td><code class="traditional">%</code></td><td>百分小数格式，会在后面加上百分号</td></tr></tbody></table></figure>



<p>以上就是Python3字符串格式化的完整格式语法，这种语法相比百分号格式更加强大。</p>



<p>这种语法的强大之处就在于，甚至可以通过嵌套花括号，来动态调整格式化：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">*</span><span style="color: #bf8b56;">{0:#{width}{base}}</span><span style="color: #56bf8b;">*</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">100</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">width</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">15</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">base</span><span style="color: #405c79;">=</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">b</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">* &nbsp; &nbsp; &nbsp;0b1100100*</span><span style="color: #405c79;">'</span></div></div>



<p>使用这种格式化方式，还可以自行决定如何格式化一个对象。下文会提到这种方法。</p>



<h3 class="wp-block-heading" id="使用f-string">使用f-string</h3>



<p>Python3.6&nbsp;中新增了一种语法，称为 f-string ，它在保持这种格式化语法的强大性的同时，更加简洁、直观。</p>



<p>f-string即在正常的字符串字面量前面加上一个“ <code class="traditional">f</code> ”。这种字符串可以直接在表示时便被格式化：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; something = [</span><span style="color: #bf8b56;">1</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">2</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">0.6</span><span style="color: #405c79;">, </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">hello</span><span style="color: #405c79;">'</span><span style="color: #405c79;">]</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; f</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">There are </span><span style="color: #bf8b56;">{something} {len(something)}</span><span style="color: #56bf8b;"> things.</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">"</span><span style="color: #56bf8b;">There are [1, 2, 0.6, 'hello'] 4 things.</span><span style="color: #405c79;">"</span></div></div>



<p>注意，这里直接引用了上下文的对象，或者说<span style="text-decoration: underline;">一个表达式的值</span>，将这个表达式的值用于格式化。</p>



<p>可以用上文中提到的语法对该表达式的值进行格式化处理：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; f</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The first of them is </span><span style="color: #bf8b56;">{something[0]:=+5}</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The first of them is + &nbsp; 1</span><span style="color: #405c79;">'</span></div></div>



<p>f-string 不仅可以用于这种普通的字符串，还可以用于三个引号对构成的多行字符串，具体的使用方法与普通字符串是一致的。</p>



<p>f-string&nbsp;和原始字符串可以共用，形成一种特殊的 fr&nbsp;字符串：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; regular_expression = </span><span style="color: #bf568b;font-weight: bold;">r</span><span style="color: #405c79;">'[</span><span style="color: #bf8b56;">aei</span><span style="color: #405c79;">]+(?=</span><span style="color: #bf8b56;">\d</span><span style="color: #405c79;">)'</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; fr</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">\</span><span style="color: #bf8b56;">{regular_expression}</span><span style="color: #56bf8b;">\i</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">'</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">[aei]+(?=</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">d)</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">i</span><span style="color: #405c79;">'</span></div></div>



<p>起始符 f&nbsp;和 r&nbsp;的顺序以及大小写都无所谓。f 修饰符会优先起作用，将字符串中的占位符换成需要的内容。</p>



<p>f-string&nbsp;简洁强大，在大多数即格式即用的时候非常好用。</p>



<h2 class="wp-block-heading" id="自定义格式化">自定义格式化</h2>



<p>可以根据自己的类型，确定如何对数据进行格式化。例如，Python内置的日期时间类型就支持一种对日期时间处理的特殊格式化：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #bf568b;font-weight: bold;">from</span><span style="color: #405c79;"> datetime </span><span style="color: #bf568b;font-weight: bold;">import</span><span style="color: #405c79;"> datetime</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">now is </span><span style="color: #bf8b56;">{:%Y %b %d[%a] %H:%M:%S}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(datetime.now())</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">now is 2022 Feb 22[Tue] 20:55:33</span><span style="color: #405c79;">'</span></div></div>



<p>如果自定义的类需要自定义的字符串格式方法，那么它需要实现特殊方法 <code class="traditional">__format__()</code> 。该方法的标准结构为：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #bf568b;font-weight: bold;">class</span><span style="color: #405c79;"> </span><span style="color: #568bbf;">TypeName</span><span style="color: #405c79;">:</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; ...</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__format__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, format_spec: </span><span style="color: #bf8b56;">str</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">pass</span></div></div>



<p>在进行字符串格式化时，冒号后面的转换说明符会传递给 <code class="traditional">format_spec</code>&nbsp;参数，这样对象就可以借助该参数中的内容，做一些合适的处理，返回一个字符串以供格式化。</p>



<p>注意：如果使用“ <code class="traditional">!</code> ”显式转换，那么经过显式转换后，该对象已经变成字符串类型，因此后面需要使用字符串的转换说明符格式。</p>



<p>下面提供了一个示例，给该类的使用者提供了自行格式化的方式：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #bf568b;font-weight: bold;">class</span><span style="color: #405c79;"> </span><span style="color: #568bbf;">Point</span><span style="color: #405c79;">:</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__init__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">x</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">y</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">z</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.x, </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.y, </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.z = x, y, z</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__format__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, format_spec: </span><span style="color: #bf8b56;">str</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">return</span><span style="color: #405c79;"> format_spec.replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%x</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.x))\</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%y</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.y))\</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%z</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.z))</span></div></div>



<p>下面是一个使用示例：</p>



<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">p = Point(</span><span style="color: #bf8b56;">10</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">20</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">6.15</span><span style="color: #405c79;">)</span></div><div><span style="color: #bf568b;">print</span><span style="color: #405c79;">(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The end of the line is at {:(</span><span style="color: #bf8b56;">%x</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%y</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%z</span><span style="color: #56bf8b;">)}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(p))</span></div></div>



<p>获得的结果为：</p>



<div class="code-console">
$ python -u string-format.py<br>
The end of the line is at (10, 20, 6.15)
</div>



<p>最后，Python3内置了一个函数 <code class="traditional">format(value, format_spec)</code> ，本质上就是调用对象的 <code class="traditional">__format__()</code>&nbsp;方法，来表示一个对象被格式化后的结果。</p>



<p>至此，可以总结出Python3字符串格式化的一般规律了：</p>



<p>花括号对“ <code class="traditional">{}</code> ”表示格式后的内容将放在这里；</p>



<p>花括号内，最开头的一部分表示需要对什么数据执行格式化。它可能是一个外部的变量、<code class="traditional">.format()</code>&nbsp;的一个参数，或它们参与的表达式计算后的结果；</p>



<p>接下来“ <code class="traditional">!</code> ”的部分决定是否需要调用显式转换，如果使用这一步，该数据将先一步按照某些方式转换为标准的字符串；</p>



<p>最后，“ <code class="traditional">:</code> ”后面的部分是转换说明符，这部分内容将决定一个对象如何进行最终的格式化。对于 <code class="traditional">str</code>&nbsp;对象的转换说明符语法，可以参见前文的详细介绍，并在使用时查阅即可。</p>



<p></p>



<p>总体来说，字符串的格式化作为一种Python标准的语法，不需要深入研究它，只需要明白它的基本工作原理，真正要用到的时候只需要查阅它的细节即可。</p>



<h2 class="wp-block-heading" id="参考资料">参考资料</h2>



<p><a href="https://docs.python.org/3.10/library/string.html#format-string-syntax">https://docs.python.org/3.10/library/string.html#format-string-syntax</a></p>



<p>Python3标准库 <code class="traditional">string</code> ，介绍字符串是如何格式与被格式的</p>



<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals">https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals</a></p>



<p>从词法分析的角度介绍了格式化字符串字面量的原理</p>



<p><a href="https://docs.python.org/3/reference/datamodel.html#object.format">https://docs.python.org/3/reference/datamodel.html#object.format</a></p>



<p>介绍对象的格式化模型</p>



<p><a href="https://www.python.org/dev/peps/pep-3101/">https://www.python.org/dev/peps/pep-3101/</a></p>



<p>一篇非常优质的关于Python3字符串格式化的讨论</p>
<p><a rel="nofollow" href="/archives/119">Python3 字符串格式化</a>最先出现在<a rel="nofollow" href="">冰封残烛的个人小站</a>。</p>
]]></content:encoded>
					
					<wfw:commentRss>/archives/119/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
