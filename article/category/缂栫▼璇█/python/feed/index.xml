<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Python &#8211; 冰封残烛的个人小站</title>
	<atom:link href="http://localhost/wordpress/article/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/feed?simply_static_page=175" rel="self" type="application/rss+xml" />
	<link></link>
	<description></description>
	<lastBuildDate>Sun, 16 Apr 2023 10:02:49 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>
	<item>
		<title>Python3字符串格式化</title>
		<link>/article/6.html</link>
					<comments>/article/6.html#respond</comments>
		
		<dc:creator><![CDATA[Hello]]></dc:creator>
		<pubDate>Sun, 16 Apr 2023 09:54:39 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<guid isPermaLink="false">/?p=6</guid>

					<description><![CDATA[所谓格式化，指将现有的数据组成得到一个完整的字符串用&#46;&#46;&#46;]]></description>
										<content:encoded><![CDATA[
<p>所谓<strong>格式化</strong>，指将现有的数据组成得到一个完整的字符串用于输出、传参等的方式。Python2中，通常使用百分号的方式来对字符串进行格式化操作。例如：</p>

<div class="vscode-block" style="color: #405c79; background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am </span><span style="color: #bf8b56;">%s</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%d</span><span style="color: #56bf8b;"> years old.</span><span style="color: #405c79;">'</span><span style="color: #405c79;"> % (</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am Jack, 17 years old.</span><span style="color: #405c79;">'</span></div></div>

<p>这种方式来源于C语言的 <code class="traditional">printf()</code> 等所使用的转换说明，这么做不够灵活，格式化较为麻烦。Python3中更新了一种更为现代化的格式化方法，可以更方便地达到预期的输出效果。</p>

<h2 id="python3中的格式化">Python3中的格式化</h2>

<h3 id="使用str-format-方法">使用str.format()方法</h3>

<p>Python3中格式化的基本思路是：在字符串中待格式数据用花括号对“ <code class="traditional">{}</code> ”占位，在格式化时再用实际的内容替换。<code class="traditional">str.format()</code>&nbsp;方法告诉字符串中的花括号对用哪些数据替换。该方法格式化的一个基本示例为：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;"> years old</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">I am Jack, 17 years old</span><span style="color: #405c79;">'</span></div></div>

<p>使用这种方式对字符串格式化更加强大。在这个基本的示例中，它也非常直观地表明了如何进行格式化。</p>

<hr class="wp-block-separator"/>

<p>使用 <code class="traditional">str.format()</code>&nbsp;格式化的第一个优点是，它能充分利用提供的数据。</p>

<p>例如，可以在花括号内设置一个整数，代表使用哪一个格式数据填充这部分内容：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">He is </span><span style="color: #bf8b56;">{0}</span><span style="color: #56bf8b;">. </span><span style="color: #bf8b56;">{0}</span><span style="color: #56bf8b;"> is </span><span style="color: #bf8b56;">{1}</span><span style="color: #56bf8b;"> years old.</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">Jack</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">17</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">He is Jack. Jack is 17 years old.</span><span style="color: #405c79;">'</span></div></div>

<p>除了这种按位置的接收参数方式，还可以使用按关键字的接收参数方式：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">item </span><span style="color: #bf8b56;">{a}</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">{and_another}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">a</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">1</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">and_another</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">1.234</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">item 1, 1.234</span><span style="color: #405c79;">'</span></div></div>

<p>它们可以在同一个格式字符串中混合使用。</p>

<p>由于字符串内的花括号被用来确定格式数据的位置，可以用重复的花括号“ <code class="traditional">{{</code>&nbsp;”和“ <code class="traditional">}}</code> ”来代表格式字符串内原始的花括号字符：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use {{}} to format </span><span style="color: #bf8b56;">{}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">string</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use </span><span style="color: #bf8b56;">{}</span><span style="color: #56bf8b;"> to format string</span><span style="color: #405c79;">'</span></div></div>

<p>百分号格式字符串支持的调整精度、宽度、对齐、符号等，<code class="traditional">str.format()</code>&nbsp;也全部支持。以下是部分示例：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #bf568b;font-weight: bold;">from</span><span style="color: #405c79;"> math </span><span style="color: #bf568b;font-weight: bold;">import</span><span style="color: #405c79;"> e</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">natural logarithm is <span style="color: #bf8b56;">{:+10.4}</span></span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(e)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">natural logarithm is &nbsp; &nbsp; +2.718</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">{:#x}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">1000</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">0x3e8</span><span style="color: #405c79;">'</span></div></div>

<h3 id="格式化的完整语法">格式化的完整语法</h3>

<p>一个花括号内可以包含许多控制用的说明，它们决定了如何对填充的内容设置格式。格式化修饰符的完整语法为：</p>

<p class="has-text-align-center"><code class="traditional">{[key][!flag][:[[fill]align][sign][#][0][minwidth][.precision][type]]}</code></p>

<p>方括号代表里面的内容作为整体是可选的。注意它们从左至右的位置。</p>

<ul><li><code class="traditional">key</code>&nbsp;代表用哪一个数据来填入该位置：</li></ul>

<p>它可以是整数，也可以是标识符。由于格式方法的完整结构是 <code class="traditional">str.format(self, *args, **kwargs)</code> ，整数告诉格式字符串从 <code class="traditional">args</code>&nbsp;元组内寻找元素，标识符告诉格式字符串从 <code class="traditional">kwargs</code>&nbsp;字典内寻找元素。</p>

<p>这种方式直接引用的对象，甚至可以再次通过“ <code class="traditional">.</code> ”运算符或“ <code class="traditional">[]</code> ”运算符取值：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use </span><span style="color: #bf8b56;">{0.__name__}</span><span style="color: #56bf8b;">, get </span><span style="color: #bf8b56;">{1[value]}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span></div><div><span style="color: #405c79;">... &nbsp; &nbsp; </span><span style="color: #8b56bf;">divmod</span><span style="color: #405c79;">, {</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">value</span><span style="color: #405c79;">'</span><span style="color: #405c79;">: (</span><span style="color: #bf8b56;">10.3</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">2</span><span style="color: #405c79;">)})</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">use divmod, get (10.3, 2)</span><span style="color: #405c79;">'</span></div></div>

<ul><li><code class="traditional">!flag</code> 是一个<strong>显式转换</strong>标志。这个显式转换标志用于最先对被格式的数据变为标准的字符串对象：</li></ul>

<p><code class="traditional">!s</code>&nbsp;会用 <code class="traditional">str()</code>&nbsp;函数处理数据，得到对象的详细信息；<br><code class="traditional">!r</code> 会用 <code class="traditional">repr()</code> 函数处理数据，得到对象的描述信息；<br><code class="traditional">!a</code> 会用 <code class="traditional">acsii()</code> 函数处理数据，得到 ASCII 字符串。</p>

<p>例如，如果要让替换的字符串加上引号，可以使用 <code class="traditional">!r</code> 修饰它：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The type of ... is </span><span style="color: #bf8b56;">{!r}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">list</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">"</span><span style="color: #56bf8b;">The type of ... is 'list'</span><span style="color: #405c79;">"</span></div></div>

<p>接下来的冒号后面引导了一些标准的<strong>格式说明符</strong>(format specifier)，它们有：</p>

<ul><li><code class="traditional">align</code>&nbsp;代表在该位置比较宽时，数据是如何对齐的。该选项提供的值有：</li></ul>

<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">&lt;</code></td><td>左对齐</td></tr><tr><td><code class="traditional">&gt;</code></td><td>右对齐</td></tr><tr><td><code class="traditional">^</code></td><td>居中对齐</td></tr><tr><td><code class="traditional">=</code></td><td>一种对数字的特殊对齐方式，数字右对齐，但符号在最左侧</td></tr></tbody></table></figure>

<p>对最后一种对齐方式的直观演示如下：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: </span><span style="color: #bf8b56;">{:=10}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">15.02</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: - &nbsp; &nbsp;15.02</span><span style="color: #405c79;">'</span></div></div>

<ul><li>如果给定了对齐方式，那么 <code class="traditional">fill</code>&nbsp;表示对齐后剩下的位置该填充什么字符。默认情况下，剩余的部分用空格代替。</li></ul>

<p>对以上格式化稍作修改，它会美观很多：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: </span><span style="color: #bf8b56;">{:0=10}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">15.02</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">data: -000015.02</span><span style="color: #405c79;">'</span></div></div>

<ul><li><code class="traditional">sign</code>&nbsp;选项告诉格式字符串如何处理数字的符号位：</li></ul>

<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">+</code></td><td>正数前面加上正号“ <code class="traditional">+</code> ”，负数前面加上符号“ <code class="traditional">-</code> ”</td></tr><tr><td><code class="traditional">-</code></td><td>只需要在负数前加上负号“ <code class="traditional">-</code> ”即可</td></tr><tr><td>空格</td><td>在负数前加上负号“ <code class="traditional">-</code> ”；同时为了对齐，在正数前加一个空格</td></tr></tbody></table></figure>

<ul><li><code class="traditional">#</code> 字符如果使用，可以处理不同进制的数字，在前面加上“ <code class="traditional">0b</code> ”、“ <code class="traditional">0o</code> ”、“ <code class="traditional">0x</code> ”等前缀。</li></ul>

<ul><li><code class="traditional">minwidth</code>&nbsp;选项代表该位置的最小宽度：</li></ul>

<p>前面的对齐和填充选项就是基于该最小宽度设置的。如果格式后该位置拥有的字符数仍然无法填满这个最小宽度，那么对齐和填充才有意义。</p>

<p>所谓的“最小”表示如果已经比这个最小值还宽了，那就可以忽略它，按正常的宽度排列内容。</p>

<p>还有一种特殊的情况是，如果该宽度值被写成“ <code class="traditional">0</code> ”打头的数字，那么它会使用一种特殊的“零填充(zero-padding)”方式。具体来说，它等价于使用“ <code class="traditional">=</code> ”的对齐并用“ <code class="traditional"><code class="traditional">0</code></code> ”字符填充。例如：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">{:010}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(-</span><span style="color: #bf8b56;">30</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">-000000030</span><span style="color: #405c79;">'</span></div></div>

<ul><li><code class="traditional">.precision</code> 表示小数显示多少位数。如果不用在小数上，表示最多显示多少字符。</li></ul>

<ul><li><code class="traditional">type</code> 选项告诉格式字符串数据用什么类型展示：</li></ul>

<p>对于整数，可以用以下选项将它解释成：</p>

<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">b</code></td><td>二进制数字</td><td><code class="traditional">d</code>（默认）</td><td>十进制数字</td></tr><tr><td><code class="traditional">o</code></td><td>八进制数字</td><td><code class="traditional">c</code></td><td>对应位置的Unicode字符</td></tr><tr><td><code class="traditional">x</code></td><td>十六进制数字</td><td><code class="traditional">n</code></td><td>数字。相比通用的 <code class="traditional">d</code>&nbsp;选项，它可能会根据本地化做一些表示方面的调整</td></tr><tr><td><code class="traditional">X</code></td><td>全部大写的十六进制数字，包括可能的前缀</td><td></td><td></td></tr></tbody></table></figure>

<p>对于浮点数，可以用以下选项将它解释成：</p>

<figure class="wp-block-table"><table><tbody><tr><td><code class="traditional">e</code></td><td>使用带“ <code class="traditional">e</code> ”的科学计数法表示浮点数</td><td><code class="traditional">g</code>（默认）</td><td>哪种方式表示更清晰，就用哪种方式</td></tr><tr><td><code class="traditional">E</code></td><td>大写版本的“ <code class="traditional">e</code> ”</td><td><code class="traditional">G</code></td><td>大写版本的“ <code class="traditional">g</code> ”</td></tr><tr><td><code class="traditional">f</code></td><td>使用小数点形式表示浮点数</td><td><code class="traditional">n</code></td><td>浮点数。相比通用的 <code class="traditional">g</code>&nbsp;选项，它可能会根据本地化做一些表示方面的调整</td></tr><tr><td><code class="traditional">F</code></td><td>大写版本的“ <code class="traditional">f</code> ”</td><td><code class="traditional">%</code></td><td>百分小数格式，会在后面加上百分号</td></tr></tbody></table></figure>

<p>以上就是Python3字符串格式化的完整格式语法，这种语法相比百分号格式更加强大。</p>

<p>这种语法的强大之处就在于，甚至可以通过嵌套花括号，来动态调整格式化：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">*</span><span style="color: #bf8b56;">{0:#{width}{base}}</span><span style="color: #56bf8b;">*</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(</span><span style="color: #bf8b56;">100</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">width</span><span style="color: #405c79;">=</span><span style="color: #bf8b56;">15</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">base</span><span style="color: #405c79;">=</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">b</span><span style="color: #405c79;">'</span><span style="color: #405c79;">)</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">* &nbsp; &nbsp; &nbsp;0b1100100*</span><span style="color: #405c79;">'</span></div></div>

<p>使用这种格式化方式，还可以自行决定如何格式化一个对象。下文会提到这种方法。</p>

<h3 id="使用f-string">使用f-string</h3>

<p>Python3.6&nbsp;中新增了一种语法，称为 f-string ，它在保持这种格式化语法的强大性的同时，更加简洁、直观。</p>

<p>f-string即在正常的字符串字面量前面加上一个“ <code class="traditional">f</code> ”。这种字符串可以直接在表示时便被格式化：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; something = [</span><span style="color: #bf8b56;">1</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">2</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">0.6</span><span style="color: #405c79;">, </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">hello</span><span style="color: #405c79;">'</span><span style="color: #405c79;">]</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; f</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">There are </span><span style="color: #bf8b56;">{something} {len(something)}</span><span style="color: #56bf8b;"> things.</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">"</span><span style="color: #56bf8b;">There are [1, 2, 0.6, 'hello'] 4 things.</span><span style="color: #405c79;">"</span></div></div>

<p>注意，这里直接引用了上下文的对象，或者说<span style="text-decoration: underline;">一个表达式的值</span>，将这个表达式的值用于格式化。</p>

<p>可以用上文中提到的语法对该表达式的值进行格式化处理：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; f</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The first of them is </span><span style="color: #bf8b56;">{something[0]:=+5}</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The first of them is + &nbsp; 1</span><span style="color: #405c79;">'</span></div></div>

<p>f-string 不仅可以用于这种普通的字符串，还可以用于三个引号对构成的多行字符串，具体的使用方法与普通字符串是一致的。</p>

<p>f-string&nbsp;和原始字符串可以共用，形成一种特殊的 fr&nbsp;字符串：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; regular_expression = </span><span style="color: #bf568b;font-weight: bold;">r</span><span style="color: #405c79;">'[</span><span style="color: #bf8b56;">aei</span><span style="color: #405c79;">]+(?=</span><span style="color: #bf8b56;">\d</span><span style="color: #405c79;">)'</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; fr</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">\</span><span style="color: #bf8b56;">{regular_expression}</span><span style="color: #56bf8b;">\i</span><span style="color: #405c79;">'</span></div><div><span style="color: #405c79;">'</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">[aei]+(?=</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">d)</span><span style="color: #568bbf;">\\</span><span style="color: #56bf8b;">i</span><span style="color: #405c79;">'</span></div></div>

<p>起始符 f&nbsp;和 r&nbsp;的顺序以及大小写都无所谓。f 修饰符会优先起作用，将字符串中的占位符换成需要的内容。</p>

<p>f-string&nbsp;简洁强大，在大多数即格式即用的时候非常好用。</p>

<h2 id="自定义格式化">自定义格式化</h2>

<p>可以根据自己的类型，确定如何对数据进行格式化。例如，Python内置的日期时间类型就支持一种对日期时间处理的特殊格式化：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #bf568b;font-weight: bold;">from</span><span style="color: #405c79;"> datetime </span><span style="color: #bf568b;font-weight: bold;">import</span><span style="color: #405c79;"> datetime</span></div><div><span style="color: #405c79;">&gt;&gt;&gt; </span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">now is </span><span style="color: #bf8b56;">{:%Y %b %d[%a] %H:%M:%S}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(datetime.now())</span></div><div><span style="color: #405c79;">'</span><span style="color: #56bf8b;">now is 2022 Feb 22[Tue] 20:55:33</span><span style="color: #405c79;">'</span></div></div>

<p>如果自定义的类需要自定义的字符串格式方法，那么它需要实现特殊方法 <code class="traditional">__format__()</code> 。该方法的标准结构为：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #bf568b;font-weight: bold;">class</span><span style="color: #405c79;"> </span><span style="color: #568bbf;">TypeName</span><span style="color: #405c79;">:</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; ...</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__format__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, format_spec: </span><span style="color: #bf8b56;">str</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">pass</span></div></div>

<p>在进行字符串格式化时，冒号后面的转换说明符会传递给 <code class="traditional">format_spec</code>&nbsp;参数，这样对象就可以借助该参数中的内容，做一些合适的处理，返回一个字符串以供格式化。</p>

<p>注意：如果使用“ <code class="traditional">!</code> ”显式转换，那么经过显式转换后，该对象已经变成字符串类型，因此后面需要使用字符串的转换说明符格式。</p>

<p>下面提供了一个示例，给该类的使用者提供了自行格式化的方式：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #bf568b;font-weight: bold;">class</span><span style="color: #405c79;"> </span><span style="color: #568bbf;">Point</span><span style="color: #405c79;">:</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__init__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">x</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">y</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">z</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.x, </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.y, </span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.z = x, y, z</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">def</span><span style="color: #405c79;"> </span><span style="color: #8b56bf;">__format__</span><span style="color: #405c79;">(</span><span style="color: #bf8b56;">self</span><span style="color: #405c79;">, format_spec: </span><span style="color: #bf8b56;">str</span><span style="color: #405c79;">):</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="color: #bf568b;font-weight: bold;">return</span><span style="color: #405c79;"> format_spec.replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%x</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.x))\</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%y</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.y))\</span></div><div><span style="color: #405c79;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .replace(</span><span style="color: #405c79;">'</span><span style="color: #bf8b56;">%z</span><span style="color: #405c79;">'</span><span style="color: #405c79;">, </span><span style="color: #bf568b;">str</span><span style="color: #405c79;">(</span><span style="color: #bfbf56;">self</span><span style="color: #405c79;">.z))</span></div></div>

<p>下面是一个使用示例：</p>

<div class="vscode-block" style="color: #405c79;background-color: #f7f9fb;"><div><span style="color: #405c79;">p = Point(</span><span style="color: #bf8b56;">10</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">20</span><span style="color: #405c79;">, </span><span style="color: #bf8b56;">6.15</span><span style="color: #405c79;">)</span></div><div><span style="color: #bf568b;">print</span><span style="color: #405c79;">(</span><span style="color: #405c79;">'</span><span style="color: #56bf8b;">The end of the line is at {:(</span><span style="color: #bf8b56;">%x</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%y</span><span style="color: #56bf8b;">, </span><span style="color: #bf8b56;">%z</span><span style="color: #56bf8b;">)}</span><span style="color: #405c79;">'</span><span style="color: #405c79;">.format(p))</span></div></div>

<p>获得的结果为：</p>

<div class="code-console">
$ python -u string-format.py<br>
The end of the line is at (10, 20, 6.15)
</div>

<p>最后，Python3内置了一个函数 <code class="traditional">format(value, format_spec)</code> ，本质上就是调用对象的 <code class="traditional">__format__()</code>&nbsp;方法，来表示一个对象被格式化后的结果。</p>

<p>至此，可以总结出Python3字符串格式化的一般规律了：</p>

<p>花括号对“ <code class="traditional">{}</code> ”表示格式后的内容将放在这里；</p>

<p>花括号内，最开头的一部分表示需要对什么数据执行格式化。它可能是一个外部的变量、<code class="traditional">.format()</code>&nbsp;的一个参数，或它们参与的表达式计算后的结果；</p>

<p>接下来“ <code class="traditional">!</code> ”的部分决定是否需要调用显式转换，如果使用这一步，该数据将先一步按照某些方式转换为标准的字符串；</p>

<p>最后，“ <code class="traditional">:</code> ”后面的部分是转换说明符，这部分内容将决定一个对象如何进行最终的格式化。对于 <code class="traditional">str</code>&nbsp;对象的转换说明符语法，可以参见前文的详细介绍，并在使用时查阅即可。</p>

<p></p>

<p>总体来说，字符串的格式化作为一种Python标准的语法，不需要深入研究它，只需要明白它的基本工作原理，真正要用到的时候只需要查阅它的细节即可。</p>

<h2 id="参考资料">参考资料</h2>

<p><a href="https://docs.python.org/3.10/library/string.html#format-string-syntax">https://docs.python.org/3.10/library/string.html#format-string-syntax</a></p>

<p>Python3标准库 <code class="traditional">string</code> ，介绍字符串是如何格式与被格式的</p>

<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals">https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals</a></p>

<p>从词法分析的角度介绍了格式化字符串字面量的原理</p>

<p><a href="https://docs.python.org/3/reference/datamodel.html#object.format">https://docs.python.org/3/reference/datamodel.html#object.format</a></p>

<p>介绍对象的格式化模型</p>

<p><a href="https://www.python.org/dev/peps/pep-3101/">https://www.python.org/dev/peps/pep-3101/</a></p>

<p>一篇非常优质的关于Python3字符串格式化的讨论</p>
]]></content:encoded>
					
					<wfw:commentRss>/article/6.html/feed</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
